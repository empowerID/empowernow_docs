"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[1886],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var o=r(96540);const t={},i=o.createContext(t);function s(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:n},e.children)}},68743:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"services/nowconnect/reference/configuration","title":"configuration","description":"Configuration Reference","source":"@site/docs/services/nowconnect/reference/configuration.md","sourceDirName":"services/nowconnect/reference","slug":"/services/nowconnect/reference/configuration","permalink":"/empowernow_docs/docs/services/nowconnect/reference/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/nowconnect/reference/configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"compliance-mapping","permalink":"/empowernow_docs/docs/services/nowconnect/reference/compliance-mapping"},"next":{"title":"dashboards-and-alerts","permalink":"/empowernow_docs/docs/services/nowconnect/reference/dashboards-and-alerts"}}');var t=r(74848),i=r(28453);const s={},c=void 0,a={},d=[{value:"Configuration Reference",id:"configuration-reference",level:2},{value:"Cloud (<code>config/cloud.yaml</code>)",id:"cloud-configcloudyaml",level:3},{value:"Premise (<code>config/premise.yaml</code>)",id:"premise-configpremiseyaml",level:3},{value:"Env vars (Premise Agent)",id:"env-vars-premise-agent",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"configuration-reference",children:"Configuration Reference"}),"\n",(0,t.jsxs)(n.h3,{id:"cloud-configcloudyaml",children:["Cloud (",(0,t.jsx)(n.code,{children:"config/cloud.yaml"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'listeners:\r\n  - name: addomain-ldap\r\n    bind: "0.0.0.0:389"\r\n    connector: "addomain"\r\n  - name: devdomain1-ldaps\r\n    bind: "0.0.0.0:636"\r\n    connector: "devdomain1"\r\n  - name: sapldapvds\r\n    bind: "0.0.0.0:400"\r\n    connector: "sapldapvds"\r\n\r\ntunnel:\r\n  host: "0.0.0.0"\r\n  port: 8765\r\n  max_ws_payload: 8192\r\n  ping_interval_sec: 20\r\n  ping_timeout_sec: 20\r\n\r\nlimits:\r\n  idle_timeout_ms: 60000\r\n  queue_depth_per_cid: 100\r\n  max_conn_total: 2000\r\n\r\nsecurity:\r\n  jwks_url: "https://idp.ocg.labs.empowernow.ai/api/oidc/.well-known/jwks.json"\r\n  audience: "nowconnect"\r\n  allow_cidrs: []\r\n  require_connector_scopes: false   # optional enforcement; can be toggled via env\r\n  fapi_mode: 0                      # 0: off (default); 2: enable DPoP verification when implemented\r\n\r\nobservability:\r\n  metrics_port: 8000\r\n  log_level: "INFO"\r\n\r\npdp:\r\n  url: ""                     # optional AuthZEN PDP endpoint; enable if set\r\n  cache_ttl_sec: 5            # small cache for allow decisions\r\n  timeout_ms: 500             # PDP request timeout\r\n  fail_open: false            # if true, allow on PDP errors; default deny-fast\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"premise-configpremiseyaml",children:["Premise (",(0,t.jsx)(n.code,{children:"config/premise.yaml"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'tunnel:\r\n  url: "wss://api.ocg.labs.empowernow.ai/tunnel"\r\n  agent_id: "premise-site-01"\r\n  exported_connectors: ["addomain","devdomain1","sapldapvds"]\r\n  auth:\r\n    token_file: "/run/secrets/nowconnect-agent.jwt"\r\n  ping_interval_sec: 20\r\n  ping_timeout_sec: 20\r\n  max_ws_payload: 8192\r\n\r\ntargets:\r\n  addomain:   { host: "addomain.com",  port: 389 }\r\n  devdomain1: { host: "devdomain1.com", port: 636 }\r\n  sapldapvds: { host: "sapldapvds",     port: 400 }\r\n\r\nlimits:\r\n  idle_timeout_ms: 60000\r\n  connect_timeout_ms: 3000\r\n  queue_depth_per_cid: 100\r\n  max_inflight_cids: 2000\r\n\r\nobservability:\r\n  metrics_port: 8000\r\n  log_level: "INFO"\r\n\r\nproxy:\r\n  https_proxy: ""\r\n  no_proxy: ""\r\n  ca_bundle: ""\r\n\r\n### Environment variables (Cloud)\r\n\r\n- `NOWCONNECT_JWKS_URL`, `NOWCONNECT_AUDIENCE`\r\n- `NOWCONNECT_REQUIRE_CONNECTOR_SCOPES` (default `false`)\r\n- `NOWCONNECT_FAPI_MODE` (default `0`)\r\n- `NOWCONNECT_PDP_URL`, `NOWCONNECT_PDP_CACHE_TTL_SEC`, `NOWCONNECT_PDP_TIMEOUT_MS`, `NOWCONNECT_PDP_FAIL_OPEN`\r\n\r\n### Environment variables (Premise)\r\n\r\n- `NC_CA_BUNDLE` path to a custom CA bundle file (overrides YAML `proxy.ca_bundle`)\r\n- `NC_TRUST_ENV=true` to honor system proxy env (`HTTPS_PROXY`, `NO_PROXY`, ...)\r\n- Env overrides take precedence over YAML\n'})}),"\n",(0,t.jsx)(n.h3,{id:"env-vars-premise-agent",children:"Env vars (Premise Agent)"}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.code,{children:"how-to/premise-agent"})," for the full list and examples."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);