"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[4681],{28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var s=r(96540);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}},64049:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"services/crud-service/how-to/yaml-vault-provider","title":"YAML Vault Provider (dev-only)","description":"File-backed secrets provider for fast local iteration using canonical URIs and the same PEP/PDP seams.","source":"@site/docs/services/crud-service/how-to/yaml-vault-provider.md","sourceDirName":"services/crud-service/how-to","slug":"/services/crud-service/how-to/yaml-vault-provider","permalink":"/empowernow_docs/docs/services/crud-service/how-to/yaml-vault-provider","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/crud-service/how-to/yaml-vault-provider.md","tags":[],"version":"current","frontMatter":{"title":"YAML Vault Provider (dev-only)","description":"File-backed secrets provider for fast local iteration using canonical URIs and the same PEP/PDP seams."}}');var i=r(74848),t=r(28453);const c={title:"YAML Vault Provider (dev-only)",description:"File-backed secrets provider for fast local iteration using canonical URIs and the same PEP/PDP seams."},l=void 0,o={},d=[{value:"Visual: dev provider in the architecture",id:"visual-dev-provider-in-the-architecture",level:3},{value:"When to use",id:"when-to-use",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Canonical URIs",id:"canonical-uris",level:3},{value:"Using from code",id:"using-from-code",level:3},{value:"Bootstrap script",id:"bootstrap-script",level:3},{value:"Single-source mode",id:"single-source-mode",level:4},{value:"Manifest mode (multi-source)",id:"manifest-mode-multi-source",level:4},{value:"Secrets API (YAML provider)",id:"secrets-api-yaml-provider",level:3},{value:"Troubleshooting",id:"troubleshooting",level:3}];function a(e){const n={admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The YAML Vault Provider is a development-only secret provider that reads key/values from a YAML file on disk. It lets you iterate locally without a running Vault server while still exercising Canonical URI, PEP/PDP, and audit seams used by real providers."}),"\n",(0,i.jsx)(n.admonition,{title:"Dev-only",type:"danger",children:(0,i.jsxs)(n.p,{children:["Do not use in production. Writes and deletes are blocked when ",(0,i.jsx)(n.code,{children:"ENVIRONMENT"})," is not ",(0,i.jsx)(n.code,{children:"dev"}),"/",(0,i.jsx)(n.code,{children:"test"}),". Never commit real secrets to Git; keep the YAML file under a gitignored path."]})}),"\n",(0,i.jsx)(n.h3,{id:"visual-dev-provider-in-the-architecture",children:"Visual: dev provider in the architecture"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph LR\r\n  DevApp[Dev client/workflow] --\x3e CRUD[CRUDService]\r\n  CRUD --\x3e PEP[VaultService (PEP)]\r\n  PEP --\x3e PDP[SecretPolicyService (PDP)]\r\n  PEP --\x3e YAML[Yaml Provider]\r\n  YAML --\x3e File[(dev_secrets.yaml)]\r\n  PEP --\x3e AUD[Audit]"}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use",children:"When to use"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local dev and tests"})," when you need quick, file-backed secrets."]}),"\n",(0,i.jsx)(n.li,{children:"Do not use in production. Use OpenBao/HashiCorp providers there."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Environment"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YAML_VAULT_PATH"}),": absolute or container path to the YAML file."]}),"\n",(0,i.jsxs)(n.li,{children:["Recommended host path: ",(0,i.jsx)(n.code,{children:"ServiceConfigs/CRUDService/config/data/dev_secrets.yaml"})]}),"\n",(0,i.jsxs)(n.li,{children:["Recommended container path: ",(0,i.jsx)(n.code,{children:"/app/config/data/dev_secrets.yaml"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"File structure"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"secret:\r\n  env:\r\n    MY_API_KEY: abc123\r\n    OPENLDAP_LDAP_PASSWORD: secret\r\n  crud:\r\n    DB_USER: app\r\n    DB_PASS: s3cr3t\n"})}),"\n",(0,i.jsx)(n.h3,{id:"canonical-uris",children:"Canonical URIs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Scheme: ",(0,i.jsx)(n.code,{children:"yaml"})]}),"\n",(0,i.jsxs)(n.li,{children:["No authority. First path segment is the mount (e.g., ",(0,i.jsx)(n.code,{children:"secret"}),"). The second segment is the namespace/prefix (e.g., ",(0,i.jsx)(n.code,{children:"env"}),", ",(0,i.jsx)(n.code,{children:"crud"}),"). The fragment identifies the key."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"yaml://secret/env#MY_API_KEY\r\nyaml://secret/crud#DB_PASS\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If tenant mount guards are enabled, ensure your ",(0,i.jsx)(n.code,{children:"TENANT_ALLOWED_MOUNTS"})," includes ",(0,i.jsx)(n.code,{children:"secret"})," (or your chosen mount)."]}),"\n",(0,i.jsx)(n.h3,{id:"using-from-code",children:"Using from code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from src.services.vault_service import VaultService\r\n\r\n# Ensure YAML_VAULT_PATH is set\r\nsvc = VaultService(ttl=60)\r\ncreds = await svc.get_credentials("yaml://secret/env#MY_API_KEY", execution_context=ctx)\r\n# \u2192 {"MY_API_KEY": "abc123"}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"bootstrap-script",children:"Bootstrap script"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"scripts/yaml_dev_bootstrap.py"})," to populate the YAML file from ",(0,i.jsx)(n.code,{children:".env"})," sources."]}),"\n",(0,i.jsx)(n.h4,{id:"single-source-mode",children:"Single-source mode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'# Write all process env + .env into secret/env\r\npython scripts/yaml_dev_bootstrap.py --env-file .env --out ..\\ServiceConfigs\\CRUDService\\config\\data\\dev_secrets.yaml --mount secret\r\n\r\n# Only selected keys (allowlist)\r\npython scripts/yaml_dev_bootstrap.py --env-file .env --out ..\\ServiceConfigs\\CRUDService\\config\\data\\dev_secrets.yaml --mount secret --include "OPENLDAP_LDAP_PASSWORD,MY_API_KEY"\r\n\r\n# Different prefix under the same mount\r\npython scripts/yaml_dev_bootstrap.py --env-file .env --out ..\\ServiceConfigs\\CRUDService\\config\\data\\dev_secrets.yaml --mount secret --prefix crud\n'})}),"\n",(0,i.jsx)(n.h4,{id:"manifest-mode-multi-source",children:"Manifest mode (multi-source)"}),"\n",(0,i.jsxs)(n.p,{children:["Create a manifest that enumerates multiple ",(0,i.jsx)(n.code,{children:".env"})," files and prefixes:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# scripts/bootstrap_manifest.yaml\r\nentries:\r\n  - prefix: crud\r\n    env_file: ../CRUDService/.env\r\n    include_process_env: false\r\n  - prefix: pdp\r\n    env_file: ../pdp/.env\r\n    include_process_env: false\r\n  - prefix: analytics\r\n    env_file: ../analytics/.env\r\n    include_process_env: false\r\n  - prefix: membership\r\n    env_file: ../membership/.env\r\n    include_process_env: false\r\n  - prefix: namingservice\r\n    env_file: ../NamingService/.env\r\n    include_process_env: false\r\n  - prefix: idp\r\n    env_file: ../IdP/.env\r\n    include_process_env: false\n"})}),"\n",(0,i.jsx)(n.p,{children:"Run the manifest:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"python scripts/yaml_dev_bootstrap.py --manifest scripts/bootstrap_manifest.yaml --out ..\\ServiceConfigs\\CRUDService\\config\\data\\dev_secrets.yaml --mount secret --clear\n"})}),"\n",(0,i.jsx)(n.p,{children:"Flags:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"--out"}),": Target YAML file path (required)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"--mount"}),": Top-level mount key (default: ",(0,i.jsx)(n.code,{children:"secret"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"--env-file"}),": Single ",(0,i.jsx)(n.code,{children:".env"})," file to import"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"--include"}),": Comma-separated allowlist (only write these keys)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"--prefix"}),": Namespace under the mount (default: ",(0,i.jsx)(n.code,{children:"env"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"--manifest"}),": YAML manifest of entries (prefix/env_file/include/include_process_env)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"--clear"}),": Remove the existing output file before writing"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Notes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Re-running merges into the same file unless ",(0,i.jsx)(n.code,{children:"--clear"})," is set."]}),"\n",(0,i.jsx)(n.li,{children:"The script is dev-only; do not commit sensitive values."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"secrets-api-yaml-provider",children:"Secrets API (YAML provider)"}),"\n",(0,i.jsx)(n.p,{children:"With the YAML provider enabled, the CRUDService exposes endpoints for dev workflows (policy-protected):"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"POST /api/secrets"})," create/update"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GET /api/secrets?uri=yaml://secret/env#KEY"})," read"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DELETE /api/secrets?uri=yaml://secret/env#KEY[&destroy=true]"})," delete/destroy (dev semantics)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GET /api/secrets/metadata?mount=secret&prefix=env"})," metadata-only listing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GET /api/secrets/keys?mount=secret&prefix=env"})," key enumeration"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example (PowerShell):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'curl -X POST "http://localhost:9100/api/secrets" -H "Content-Type: application/json" -d \'{\r\n  "uri": "yaml://secret/env#MY_NEW",\r\n  "value": {"MY_NEW": "value"}\r\n}\'\r\n\r\ncurl "http://localhost:9100/api/secrets?uri=yaml://secret/env#MY_NEW"\r\n\r\ncurl -X DELETE "http://localhost:9100/api/secrets?uri=yaml://secret/env#MY_NEW"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure ",(0,i.jsx)(n.code,{children:"YAML_VAULT_PATH"})," points to the same file mounted in the service container."]}),"\n",(0,i.jsxs)(n.li,{children:["If tenant mount guards are enabled, include ",(0,i.jsx)(n.code,{children:"secret"})," in ",(0,i.jsx)(n.code,{children:"TENANT_ALLOWED_MOUNTS"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"--include"})," to avoid dumping your entire OS environment by accident."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);