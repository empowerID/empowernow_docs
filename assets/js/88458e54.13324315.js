"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[144],{28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>r});var c=n(96540);const i={},o=c.createContext(i);function l(e){const s=c.useContext(o);return c.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),c.createElement(o.Provider,{value:s},e.children)}},93851:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>t,contentTitle:()=>r,default:()=>a,frontMatter:()=>l,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"services/crud-service/how-to/mcp-ops-checklist","title":"mcp-ops-checklist","description":"Loopback MCP \u2013 Ops checklist","source":"@site/docs/services/crud-service/how-to/mcp-ops-checklist.md","sourceDirName":"services/crud-service/how-to","slug":"/services/crud-service/how-to/mcp-ops-checklist","permalink":"/empowernow_docs/docs/services/crud-service/how-to/mcp-ops-checklist","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/crud-service/how-to/mcp-ops-checklist.md","tags":[],"version":"current","frontMatter":{}}');var i=n(74848),o=n(28453);const l={},r=void 0,t={},d=[{value:"Loopback MCP \u2013 Ops checklist",id:"loopback-mcp--ops-checklist",level:2},{value:"Routing",id:"routing",level:3},{value:"Auth/scopes",id:"authscopes",level:3},{value:"CRUDService config",id:"crudservice-config",level:3},{value:"Tool generation",id:"tool-generation",level:3},{value:"Verification steps",id:"verification-steps",level:3},{value:"Troubleshooting",id:"troubleshooting",level:3}];function h(e){const s={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"loopback-mcp--ops-checklist",children:"Loopback MCP \u2013 Ops checklist"}),"\n",(0,i.jsx)(s.p,{children:"Use this checklist to validate an environment end\u2011to\u2011end."}),"\n",(0,i.jsx)(s.h3,{id:"routing",children:"Routing"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["BFF routes present:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["GET ",(0,i.jsx)(s.code,{children:"/api/crud/mcp/tools/list"})," \u2192 CRUD ",(0,i.jsx)(s.code,{children:"/mcp/tools/list"})]}),"\n",(0,i.jsxs)(s.li,{children:["POST ",(0,i.jsx)(s.code,{children:"/api/crud/mcp/jsonrpc"})," \u2192 CRUD ",(0,i.jsx)(s.code,{children:"/mcp/jsonrpc"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"authscopes",children:"Auth/scopes"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Tokens used have:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"mcp.tools.discovery"})," for listing"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"mcp.tools.invoke"})," for invoking"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"crudservice-config",children:"CRUDService config"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"MCP_MAX_TOOLS"})," set appropriately"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"MCP_DUPLICATE_POLICY=fail"})," (recommended)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"MCP_LOOPBACK_WORKFLOW_DIRECT_INVOKE"})," only enabled in dev/test"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"OTEL_DISABLED=true"})," in tests/local"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"tool-generation",children:"Tool generation"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Systems annotated with ",(0,i.jsx)(s.code,{children:"mcp.enabled: true"})," where needed"]}),"\n",(0,i.jsxs)(s.li,{children:["Workflows define ",(0,i.jsx)(s.code,{children:"inputs"})," schema for better UX"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"mcpInstance"})," filled to drive namespacing and labeling"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"verification-steps",children:"Verification steps"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"GET /api/crud/mcp/tools/list"})," returns expected tools"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"tools/call"})," health with ",(0,i.jsx)(s.code,{children:"{ verbose: true }"})," succeeds"]}),"\n",(0,i.jsx)(s.li,{children:"Invoke at least one system tool and one workflow tool"}),"\n",(0,i.jsx)(s.li,{children:"Visual Designer Tool Picker lists and filters MCP tools"}),"\n",(0,i.jsxs)(s.li,{children:["Structured logs show ",(0,i.jsx)(s.code,{children:"mcp_*"})," events with correlation IDs"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"403 \u2192 missing scopes or session/auth failure"}),"\n",(0,i.jsx)(s.li,{children:"Empty list \u2192 check ServiceConfigs mount, validation errors, or publish cap"}),"\n",(0,i.jsx)(s.li,{children:"Name collisions \u2192 see logs; adjust naming or set duplicate policy"}),"\n"]})]})}function a(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);