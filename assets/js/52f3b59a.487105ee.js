"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[8318],{28453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>c});var i=n(96540);const o={},s=i.createContext(o);function d(e){const r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(s.Provider,{value:r},e.children)}},74755:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>t,contentTitle:()=>c,default:()=>p,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"services/bff/reference/empowerid-direct","title":"EmpowerID direct API","description":"Purpose: call EmpowerID workflows and WebUI API directly via the BFF with OAuth token injection and PDP-aware context.","source":"@site/docs/services/bff/reference/empowerid-direct.md","sourceDirName":"services/bff/reference","slug":"/services/bff/reference/empowerid-direct","permalink":"/empowernow_docs/docs/services/bff/reference/empowerid-direct","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/bff/reference/empowerid-direct.md","tags":[{"inline":true,"label":"service:bff","permalink":"/empowernow_docs/docs/tags/service-bff"},{"inline":true,"label":"type:reference","permalink":"/empowernow_docs/docs/tags/type-reference"},{"inline":true,"label":"roles:admin","permalink":"/empowernow_docs/docs/tags/roles-admin"},{"inline":true,"label":"roles:devops","permalink":"/empowernow_docs/docs/tags/roles-devops"},{"inline":true,"label":"roles:developer","permalink":"/empowernow_docs/docs/tags/roles-developer"}],"version":"current","frontMatter":{"id":"empowerid-direct","title":"EmpowerID direct API","sidebar_label":"EmpowerID direct API","tags":["service:bff","type:reference","roles:admin","roles:devops","roles:developer"]},"sidebar":"tutorialSidebar","previous":{"title":"Configuration Map","permalink":"/empowernow_docs/docs/services/bff/reference/configuration"},"next":{"title":"empowerid_endpoints.yaml Reference","permalink":"/empowernow_docs/docs/services/bff/reference/empowerid-endpoints-reference"}}');var o=n(74848),s=n(28453);const d={id:"empowerid-direct",title:"EmpowerID direct API",sidebar_label:"EmpowerID direct API",tags:["service:bff","type:reference","roles:admin","roles:devops","roles:developer"]},c=void 0,t={},l=[];function a(e){const r={code:"code",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.p,{children:"Purpose: call EmpowerID workflows and WebUI API directly via the BFF with OAuth token injection and PDP-aware context."}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Code: ",(0,o.jsx)(r.code,{children:"ms_bff_spike/ms_bff/src/api/v1/empowerid/routes.py"})]}),"\n",(0,o.jsxs)(r.li,{children:["Config: ",(0,o.jsx)(r.code,{children:"ServiceConfigs/BFF/config/empowerid_endpoints.yaml"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"auth"}),": ",(0,o.jsx)(r.code,{children:"EMPOWERID_CLIENT_ID"}),", ",(0,o.jsx)(r.code,{children:"EMPOWERID_CLIENT_SECRET"}),", ",(0,o.jsx)(r.code,{children:"EMPOWERID_TOKEN_URL"}),", ",(0,o.jsx)(r.code,{children:"EMPOWERID_API_KEY"})]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"workflows.*"}),": each with ",(0,o.jsx)(r.code,{children:"pdp_resource"}),", ",(0,o.jsx)(r.code,{children:"pdp_action"}),", and input structure"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"webui_endpoints.*"}),": types, methods, parameters, and ",(0,o.jsx)(r.code,{children:"included_properties"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Auth: session cookie required (BFF session). PDP context is populated from the config hints."}),"\n",(0,o.jsx)(r.p,{children:"Authentication model"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Front-door: BFF session (cookie) gates all endpoints in this group."}),"\n",(0,o.jsxs)(r.li,{children:["Upstream to EmpowerID:","\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Workflows: BFF uses client-credential OAuth via the ",(0,o.jsx)(r.code,{children:"auth"})," block in ",(0,o.jsx)(r.code,{children:"empowerid_endpoints.yaml"})," to obtain a bearer to call EmpowerID on behalf of the user (subject passed separately)."]}),"\n",(0,o.jsx)(r.li,{children:"WebUI: current implementation expects a Bearer token on the request (Authorization header). In same-origin SPAs our API client supplies this automatically from session; for manual calls (curl), include a bearer or switch the route to use the same client-credential flow."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"For SPA developers"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Same-origin usage (recommended): call these paths directly; cookies flow automatically and the client injects any required headers.","\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"// Execute a workflow\r\nawait apiClient.post('/api/v1/empowerid/workflow', {\r\n  workflow_name: 'PersonDelete',\r\n  parameters: { PersonID: '<GUID>' }\r\n});\r\n\r\n// Call a WebUI method\r\nawait apiClient.post('/api/v1/empowerid/webui', {\r\n  type_name: 'PersonView',\r\n  method_name: 'GetByLogin',\r\n  parameters: { login: 'ada' }\r\n});\n"})}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["Cross-origin dev: set ",(0,o.jsx)(r.code,{children:"VITE_BFF_BASE_URL"})," to the BFF origin and ensure ",(0,o.jsx)(r.code,{children:"credentials: 'include'"})," so cookies are sent. Do not attach OAuth tokens from the browser."]}),"\n",(0,o.jsxs)(r.li,{children:["Catalog discovery from the UI (handy for DX):","\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:'curl -s --cookie "_eid_sid=..." https://.../api/v1/empowerid/workflows | jq .\r\ncurl -s --cookie "_eid_sid=..." https://.../api/v1/empowerid/webui/types | jq .\r\ncurl -s --cookie "_eid_sid=..." https://.../api/v1/empowerid/webui/types/PersonView/methods | jq .\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Endpoints"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["POST ",(0,o.jsx)(r.code,{children:"/api/v1/empowerid/workflow"}),": Execute a configured workflow"]}),"\n",(0,o.jsxs)(r.li,{children:["POST ",(0,o.jsx)(r.code,{children:"/api/v1/empowerid/webui"}),": Call a WebUI API method"]}),"\n",(0,o.jsxs)(r.li,{children:["GET ",(0,o.jsx)(r.code,{children:"/api/v1/empowerid/workflows"}),": List configured workflows"]}),"\n",(0,o.jsxs)(r.li,{children:["GET ",(0,o.jsx)(r.code,{children:"/api/v1/empowerid/webui/types"}),": List WebUI types"]}),"\n",(0,o.jsxs)(r.li,{children:["GET ",(0,o.jsx)(r.code,{children:"/api/v1/empowerid/webui/types/{type_name}/methods"}),": List methods for a type"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Examples"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:'curl -X POST https://.../api/v1/empowerid/workflow \\\r\n  -H "Content-Type: application/json" \\\r\n  --cookie "_eid_sid=..." \\\r\n  -d \'{"workflow_name":"PersonCreateNonResourceManager","parameters":{"Person":{"FirstName":"Ada","LastName":"Lovelace","Email":"ada@example.com","UserName":"ada"}}}\'\r\n\r\ncurl -X POST https://.../api/v1/empowerid/webui \\\r\n  -H "Content-Type: application/json" \\\r\n  --cookie "_eid_sid=..." \\\r\n  -d \'{"type_name":"PersonView","method_name":"GetByLogin","parameters":{"login":"ada"}}\'\n'})}),"\n",(0,o.jsx)(r.p,{children:"Mermaid"}),"\n",(0,o.jsx)(r.mermaid,{value:"sequenceDiagram\r\n  participant SPA\r\n  participant BFF\r\n  participant EmpowerID as EmpowerID API\r\n  SPA->>BFF: POST /api/v1/empowerid/workflow {workflow_name, parameters}\r\n  BFF->>BFF: Load config (pdp_resource/action)\r\n  BFF->>EmpowerID: POST /workflows/{name} (bearer via client credentials)\r\n  EmpowerID--\x3e>BFF: 200 JSON\r\n  BFF--\x3e>SPA: Result (with PDP context applied)"}),"\n",(0,o.jsx)(r.p,{children:"Failure modes"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Missing catalog entry: ensure ",(0,o.jsx)(r.code,{children:"workflows.*"})," or ",(0,o.jsx)(r.code,{children:"webui_endpoints.*"})," exists"]}),"\n",(0,o.jsxs)(r.li,{children:["PDP deny: check mapped ",(0,o.jsx)(r.code,{children:"pdp_resource"}),"/",(0,o.jsx)(r.code,{children:"pdp_action"})]}),"\n",(0,o.jsxs)(r.li,{children:["Token errors: verify ",(0,o.jsx)(r.code,{children:"EMPOWERID_*"})," envs and IdP reachability"]}),"\n",(0,o.jsx)(r.li,{children:"WebUI 401: if calling manually, include a bearer Authorization header; SPAs should not hand-craft tokens."}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Observability"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Request/latency counters emitted by the BFF metrics module; correlation id header ",(0,o.jsx)(r.code,{children:"X-Correlation-ID"})," is added when present"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Change control"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Edit ",(0,o.jsx)(r.code,{children:"ServiceConfigs/BFF/config/empowerid_endpoints.yaml"}),"; keep ",(0,o.jsx)(r.code,{children:"pdp_resource"}),"/",(0,o.jsx)(r.code,{children:"pdp_action"})," accurate. Promote via the normal config SOP."]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Config provenance"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Loaded via ",(0,o.jsx)(r.code,{children:"settings.empowerid_config_path"})," (defaults to ",(0,o.jsx)(r.code,{children:"config/empowerid_endpoints.yaml"})," inside the BFF container). In Docker Compose/K8s we mount ",(0,o.jsx)(r.code,{children:"ServiceConfigs/BFF/config/empowerid_endpoints.yaml"})," to that path."]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["See also: ",(0,o.jsx)(r.code,{children:"../how-to/run-empowerid-workflow"}),", ",(0,o.jsx)(r.code,{children:"../how-to/call-empowerid-webui"}),", ",(0,o.jsx)(r.code,{children:"./pdp-mapping"})]})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);