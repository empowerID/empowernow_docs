"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[6672],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>t});var c=i(96540);const s={},r=c.createContext(s);function a(e){const n=c.useContext(r);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),c.createElement(r.Provider,{value:n},e.children)}},32645:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"services/pdp/explanation/performance_caching","title":"Performance & Caching \u2014 Fast, Deterministic PDP","description":"Canonical reference: scopedpolicydesign.md. This doc covers request caching, registry caching, and PIP caching strategies.","source":"@site/docs/services/pdp/explanation/performance_caching.md","sourceDirName":"services/pdp/explanation","slug":"/services/pdp/explanation/performance_caching","permalink":"/empowernow_docs/docs/services/pdp/explanation/performance_caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/pdp/explanation/performance_caching.md","tags":[],"version":"current","frontMatter":{}}');var s=i(74848),r=i(28453);const a={},t="Performance & Caching \u2014 Fast, Deterministic PDP",o={},l=[{value:"Caching layers",id:"caching-layers",level:2},{value:"Keys &amp; invalidation",id:"keys--invalidation",level:2},{value:"Metrics to track",id:"metrics-to-track",level:2},{value:"Recommended defaults",id:"recommended-defaults",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"performance--caching--fast-deterministic-pdp",children:"Performance & Caching \u2014 Fast, Deterministic PDP"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Canonical reference: ",(0,s.jsx)(n.code,{children:"scoped_policy_design.md"}),". This doc covers request caching, registry caching, and PIP caching strategies."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"caching-layers",children:"Caching layers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Registry cache"}),": Application registry context (e.g., domain/env) \u2014 TTL ~300s"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Policy load cache"}),": Scoped policy sets per app/config hash \u2014 TTL ~60s"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PIP attribute cache"}),": Attribute lookups by app/subject \u2014 TTL ~300s"]}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart LR\r\n  A[Request] --\x3e B[Resolve app_id]\r\n  B --\x3e C{Registry cache hit?}\r\n  C -- yes --\x3e D[App context]\r\n  C -- no --\x3e E[Load app schema] --\x3e D\r\n  D --\x3e F{Policy cache hit?}\r\n  F -- yes --\x3e G[Policies]\r\n  F -- no --\x3e H[Load policies] --\x3e I[Compute config hash] --\x3e G\r\n  G --\x3e J[Evaluate]\r\n  J --\x3e K{PIP cache hit?}\r\n  K -- yes --\x3e L[Use cached attribute]\r\n  K -- no --\x3e M[Resolve via PIP] --\x3e L"}),"\n",(0,s.jsx)(n.h2,{id:"keys--invalidation",children:"Keys & invalidation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Registry cache key: ",(0,s.jsx)(n.code,{children:"schema:{app_id}"})]}),"\n",(0,s.jsxs)(n.li,{children:["Policy cache key: ",(0,s.jsx)(n.code,{children:"policies:{app_id}:{config_hash}"})]}),"\n",(0,s.jsxs)(n.li,{children:["PIP cache key: ",(0,s.jsx)(n.code,{children:"{app_id}:{attribute_path}:{subject_id}"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Invalidate on:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Application schema changes"}),"\n",(0,s.jsx)(n.li,{children:"Policy file changes (config hash changes)"}),"\n",(0,s.jsx)(n.li,{children:"PIP configuration changes"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Author impact:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"After editing policies, config hash changes \u2192 next request repopulates cache automatically."}),"\n",(0,s.jsx)(n.li,{children:"For hot reload, run watcher (developer_tools.md) to clear caches proactively."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"metrics-to-track",children:"Metrics to track"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hit/miss rates per layer"}),"\n",(0,s.jsx)(n.li,{children:"Average compilation/evaluation time"}),"\n",(0,s.jsx)(n.li,{children:"Cache sizes and TTL expirations"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Operational alerts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Low hit-rate sustained > X minutes \u2192 check watcher or frequent config changes."}),"\n",(0,s.jsx)(n.li,{children:"High evaluation time spikes \u2192 investigate PIP backends and attribute cache size."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"recommended-defaults",children:"Recommended defaults"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Registry TTL: 300s"}),"\n",(0,s.jsx)(n.li,{children:"Policy TTL: 60s"}),"\n",(0,s.jsx)(n.li,{children:"PIP TTL: 300s, max 1000 entries"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);