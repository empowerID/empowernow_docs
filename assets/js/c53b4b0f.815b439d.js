"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[936],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var r=s(96540);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},40734:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"source_content/mcp_integration_overview","title":"MCP Integration \u2013 Engineering Overview","description":"This doc explains how CRUDService discovers external Model-Context-Protocol (MCP) services and publishes its own commands/workflows as MCP tools.  It lists what\'s available today and what\'s coming next.","source":"@site/docs/source_content/mcp_integration_overview.md","sourceDirName":"source_content","slug":"/source_content/mcp_integration_overview","permalink":"/empowernow_docs/docs/source_content/mcp_integration_overview","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/source_content/mcp_integration_overview.md","tags":[],"version":"current","frontMatter":{}}');var o=s(74848),t=s(28453);const i={},l="MCP Integration \u2013 Engineering Overview",c={},a=[{value:"1  Why MCP?",id:"1--why-mcp",level:2},{value:"2  Key Components",id:"2--key-components",level:2},{value:"3  High-level Flow",id:"3--high-level-flow",level:2},{value:"3.1  Exposing internal tools",id:"31--exposing-internal-tools",level:3},{value:"3.2  Consuming remote tools",id:"32--consuming-remote-tools",level:3},{value:"4  Roadmap / In-Flight Work",id:"4--roadmap--in-flight-work",level:2},{value:"5  Running Everything Locally",id:"5--running-everything-locally",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mcp-integration--engineering-overview",children:"MCP Integration \u2013 Engineering Overview"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["This doc explains how CRUDService discovers external Model-Context-Protocol (MCP) services ",(0,o.jsx)(n.strong,{children:"and"})," publishes its own commands/workflows as MCP tools.  It lists what's available today and what's coming next."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"1--why-mcp",children:"1  Why MCP?"}),"\n",(0,o.jsx)(n.p,{children:'The goal is to make CRUDService act like a "USB-C hub for AI" \u2013 any upstream capability you plug in (REST API, DB, another MCP server) becomes a first-class tool; everything CRUDService already knows becomes accessible to downstream AI agents through the same protocol.'}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"2--key-components",children:"2  Key Components"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Feature"}),(0,o.jsx)(n.th,{children:"How it works"}),(0,o.jsx)(n.th,{children:"File(s)"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.strong,{children:"Gateway Server"})," \u2013 exposes CRUDService as MCP"]}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"src/api/mcp_loopback_routes.py"})," (HTTP/JSON-RPC) tool list/invoke; per\u2011view endpoints under ",(0,o.jsx)(n.code,{children:"/mcp/{view}"}),"; SSE bridged via BFF."]}),(0,o.jsx)(n.td,{children:"this repo"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.strong,{children:"Tool Generator"})," \u2013 turns internal YAML/workflow defs into MCP tools"]}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"src/mcp/loopback/generator.py"}),"; namespaced naming, ",(0,o.jsx)(n.code,{children:"mcpInstance"}),", schema derivation, resources."]}),(0,o.jsx)(n.td,{children:"this repo"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"CRUDService Client"})}),(0,o.jsxs)(n.td,{children:["Helper used by every generated tool to call ",(0,o.jsx)(n.code,{children:"POST /execute"})," or ",(0,o.jsx)(n.code,{children:"POST /workflow/start"})," on the core API."]}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"src/mcp/common/crud_client.py"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Launcher"})}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"python -m src.mcp.main --all"})," spins up Gateway + (optional) user/group micro-services."]}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"src/mcp/main.py"})})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"The integration consists of two runtimes that can be deployed together or separately:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Loopback MCP"})," \u2013 FastAPI routes in CRUDService that publish every command and workflow as MCP-compatible tools via HTTP JSON-RPC. Public endpoints include:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"GET /mcp/tools/list"})," \u2013 aggregated tool list (JSON)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"GET /mcp/{view}/tools/list"})," \u2013 filtered discovery within a virtual view"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"POST /mcp/jsonrpc"})," \u2013 JSON-RPC (initialize, tools/list, tools/invoke|tools/call)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"POST /mcp/{view}/jsonrpc"})," \u2013 JSON-RPC constrained to a virtual view"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"MCP Connector"})," \u2013 a client-side component that discovers remote MCP servers using ",(0,o.jsx)(n.code,{children:"/.well-known/mcp/metadata"}),", converts each advertised tool/prompts/resources into internal YAML definitions, and hot-registers them so workflows can call them like any other system.  The connector can run as a side-car or Cron job."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Supporting sub-modules:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tool Loader"})," \u2013 introspects internal YAML definitions and registers them with the Gateway at startup."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CRUDService Client"})," \u2013 thin wrapper that each generated tool uses to hit CRUDService's ",(0,o.jsx)(n.code,{children:"/execute"})," or ",(0,o.jsx)(n.code,{children:"/workflow/start"})," endpoints."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Startup helper: ",(0,o.jsx)(n.code,{children:"python -m crudservice.mcp --all"})," (flags: ",(0,o.jsx)(n.code,{children:"--gateway"}),", ",(0,o.jsx)(n.code,{children:"--connector"}),", ",(0,o.jsx)(n.code,{children:"--user"}),", ",(0,o.jsx)(n.code,{children:"--group"}),")."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"3--high-level-flow",children:"3  High-level Flow"}),"\n",(0,o.jsx)(n.h3,{id:"31--exposing-internal-tools",children:"3.1  Exposing internal tools"}),"\n",(0,o.jsx)(n.mermaid,{value:'sequenceDiagram\r\n    participant Gateway as GatewayServer\r\n    participant Loader as ToolLoader\r\n    participant Core as CRUDService API\r\n\r\n    Loader->>Core: List YAML definitions / workflows\r\n    loop at startup\r\n        Loader->>Gateway: register McpTool objects\r\n    end\r\n    Agent->>Gateway: SSE call \u2192 tool "system_object_action"\r\n    Gateway->>Core: POST /execute\r\n    Core--\x3e>Gateway: JSON result\r\n    Gateway--\x3e>Agent: streamed result'}),"\n",(0,o.jsx)(n.h3,{id:"32--consuming-remote-tools",children:"3.2  Consuming remote tools"}),"\n",(0,o.jsx)(n.p,{children:"With the Connector running, the sequence is:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["It fetches ",(0,o.jsx)(n.code,{children:"https://remote-host/.well-known/mcp/metadata"})," (JSON schema of tools/prompts/resources)."]}),"\n",(0,o.jsxs)(n.li,{children:["Each tool description is converted into either","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["an in-memory ",(0,o.jsx)(n.code,{children:"McpTool"})," object (immediate usage), or"]}),"\n",(0,o.jsxs)(n.li,{children:["a persisted YAML System Definition for long-term tracking (optional feature flag ",(0,o.jsx)(n.code,{children:"persist_yaml"}),")."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["The resulting tools are hot-registered with the Gateway, so they appear instantly in ",(0,o.jsx)(n.code,{children:"/tools"})," and can be invoked from workflows or external agents."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Remote systems therefore become first-class citizens inside the same auth, logging, and workflow pipeline."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"4--roadmap--in-flight-work",children:"4  Roadmap / In-Flight Work"}),"\n",(0,o.jsx)(n.p,{children:"4.1  Security & Auth"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Integrate core ",(0,o.jsx)(n.code,{children:"AuthorizationService"})," so every MCP call is PDP-checked."]}),"\n",(0,o.jsx)(n.li,{children:"Add OIDC bearer / DPoP token validation (user-bound agent)."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"4.2  Discovery Endpoint"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Implement ",(0,o.jsx)(n.code,{children:"GET /.well-known/mcp/metadata"})," that emits OpenAPI-style JSON for external clients."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"4.3  Persistent YAML Export"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Extend ",(0,o.jsx)(n.code,{children:"ToolLoader"})," with a ",(0,o.jsx)(n.code,{children:"write_yaml()"})," helper so discovered remote tools become version-controlled system files."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"5--running-everything-locally",children:"5  Running Everything Locally"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Run Gateway + sample user & group services\r\npython -m src.mcp.main --all --debug\r\n\r\n# Gateway only\r\npython -m src.mcp.main --gateway --debug\n"})}),"\n",(0,o.jsx)(n.p,{children:"Gateway logs will show lines like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[gateway_server] Registered proxy tool: ldap_user_create from user_management\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Last updated: now"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);