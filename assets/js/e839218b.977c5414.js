"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[7205],{28453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>t});var i=n(96540);const s={},a=i.createContext(s);function l(e){const r=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(a.Provider,{value:r},e.children)}},99481:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>o,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"services/crud-service/secrets/azure_keyvault_vault","title":"Azure Key Vault Provider","description":"Configure and operate the Azure Key Vault provider for the Secrets Platform, including canonical URIs, API behavior, security, observability, and runbooks.","source":"@site/docs/services/crud-service/secrets/azure_keyvault_vault.md","sourceDirName":"services/crud-service/secrets","slug":"/services/crud-service/secrets/azure_keyvault_vault","permalink":"/empowernow_docs/docs/services/crud-service/secrets/azure_keyvault_vault","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/crud-service/secrets/azure_keyvault_vault.md","tags":[],"version":"current","frontMatter":{"title":"Azure Key Vault Provider","sidebar_label":"Azure Key Vault","description":"Configure and operate the Azure Key Vault provider for the Secrets Platform, including canonical URIs, API behavior, security, observability, and runbooks."},"sidebar":"tutorialSidebar","previous":{"title":"Secrets PDP enrichment","permalink":"/empowernow_docs/docs/services/crud-service/secrets/pdp-enrichment"},"next":{"title":"Overview","permalink":"/empowernow_docs/docs/services/crud-service/secrets/"}}');var s=n(74848),a=n(28453);const l={title:"Azure Key Vault Provider",sidebar_label:"Azure Key Vault",description:"Configure and operate the Azure Key Vault provider for the Secrets Platform, including canonical URIs, API behavior, security, observability, and runbooks."},t=void 0,c={},d=[{value:"Summary",id:"summary",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Canonical URI",id:"canonical-uri",level:2},{value:"API surface (normalized)",id:"api-surface-normalized",level:2},{value:"Sequence: get_credentials",id:"sequence-get_credentials",level:2},{value:"Security &amp; authorization",id:"security--authorization",level:2},{value:"Observability &amp; audit",id:"observability--audit",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Error semantics (normalized)",id:"error-semantics-normalized",level:2},{value:"Quick usage",id:"quick-usage",level:2},{value:"Notes &amp; limitations",id:"notes--limitations",level:2},{value:"Related",id:"related",level:2},{value:"Azure Key Vault Strategy",id:"azure-key-vault-strategy",level:3},{value:"Overview",id:"overview",level:3},{value:"Architecture",id:"architecture-1",level:3},{value:"Canonical URI",id:"canonical-uri-1",level:3},{value:"API Surface",id:"api-surface",level:3},{value:"Error Semantics",id:"error-semantics",level:3},{value:"Observability",id:"observability",level:3},{value:"Auditing",id:"auditing",level:3},{value:"Sequence for get_credentials",id:"sequence-for-get_credentials",level:3},{value:"Configuration",id:"configuration-1",level:3},{value:"Return Shapes",id:"return-shapes",level:3},{value:"Notes and Limitations",id:"notes-and-limitations",level:3},{value:"Quick Usage",id:"quick-usage-1",level:3}];function u(e){const r={code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(r.p,{children:"Use Azure Key Vault as a provider behind the Secrets Platform (VaultService). Callers use canonical URIs; the platform enforces policy via PDP, adds tracing/metrics, and publishes audit events. This page is production\u2011ready guidance for admins and developers."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Provider: ",(0,s.jsx)(r.code,{children:"azure"})]}),"\n",(0,s.jsx)(r.li,{children:"Purpose: Retrieve and manage app secrets stored in Azure Key Vault (KV)"}),"\n",(0,s.jsxs)(r.li,{children:["Highlights:","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Canonical URI parsing (fragments, versions)"}),"\n",(0,s.jsx)(r.li,{children:"Retries, circuit\u2011breaker, and timeouts"}),"\n",(0,s.jsx)(r.li,{children:"OpenTelemetry traces and Prometheus metrics"}),"\n",(0,s.jsx)(r.li,{children:"Kafka audit events on delete"}),"\n",(0,s.jsx)(r.li,{children:"Metadata helpers (tags) and version discovery"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(r.mermaid,{value:'flowchart LR\r\n  subgraph "Application"\r\n    A["Service code"]\r\n  end\r\n  subgraph "CRUDService"\r\n    VS["VaultService (caller)"]\r\n    AZ["AzureKeyVaultStrategy\\n`azure_vault_strategy.py`"]\r\n    CB["CircuitBreaker"]\r\n    OTEL["OpenTelemetry Spans\\n`azure.*`"]\r\n  end\r\n  subgraph "Azure Cloud"\r\n    KV["Azure Key Vault"]\r\n  end\r\n  subgraph "Analytics/Observability"\r\n    KAFKA["Kafka (audit events)"]\r\n  end\r\n\r\n  A --\x3e|"requests secret ops"| VS\r\n  VS --\x3e AZ\r\n  AZ --\x3e CB\r\n  AZ --\x3e OTEL\r\n  AZ --\x3e|"get/set/delete/list"| KV\r\n  AZ --\x3e|"publish delete audit"| KAFKA\r\n\r\n  classDef comp fill:#eef,stroke:#88a\r\n  classDef cloud fill:#efe,stroke:#8a8\r\n  classDef obs fill:#fee,stroke:#a88\r\n  class A comp\r\n  class VS,AZ,CB,OTEL comp\r\n  class KV cloud\r\n  class KAFKA obs'}),"\n",(0,s.jsx)(r.h2,{id:"canonical-uri",children:"Canonical URI"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Scheme: ",(0,s.jsx)(r.code,{children:"azure://"})]}),"\n",(0,s.jsxs)(r.li,{children:["Mount: ",(0,s.jsx)(r.code,{children:"vault"})]}),"\n",(0,s.jsx)(r.li,{children:"Path: free\u2011form name (supports slashes for logical grouping)"}),"\n",(0,s.jsx)(r.li,{children:"Fragment: optional key selector for JSON payloads"}),"\n",(0,s.jsx)(r.li,{children:"Query: optional version string (Azure version ID)"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Examples:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Full secret dict: ",(0,s.jsx)(r.code,{children:"azure://vault/app/db"})]}),"\n",(0,s.jsxs)(r.li,{children:["Single field: ",(0,s.jsx)(r.code,{children:"azure://vault/app/db#username"})]}),"\n",(0,s.jsxs)(r.li,{children:["Versioned read: ",(0,s.jsx)(r.code,{children:"azure://vault/app/db#username?version=v1"})]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Behavior:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["JSON values return a parsed dict; with a fragment, returns ",(0,s.jsx)(r.code,{children:"{fragment: value}"})]}),"\n",(0,s.jsxs)(r.li,{children:["Scalar values return ",(0,s.jsx)(r.code,{children:'{value: "<scalar>"}'}),"; with a fragment, returns ",(0,s.jsx)(r.code,{children:"{fragment: None}"})]}),"\n",(0,s.jsx)(r.li,{children:"Versions are strings and map to Azure version IDs"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"api-surface-normalized",children:"API surface (normalized)"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"get_credentials(ref: str) -> dict"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Accepts canonical URIs or raw names; applies retries, circuit\u2011breaker, and timeouts"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"create_credentials(name: str, data: dict) -> dict"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Stores JSON\u2011serialized value; creates a new version"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"update_credentials(name: str, data: dict) -> dict"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Requires existence; creates a new version"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"delete_credentials(name: str) -> bool"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Soft\u2011deletes (per KV settings) and emits Kafka audit event"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"list_credentials() -> list[str]"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"All secret names"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"list_keys(path: str) -> list[str]"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Prefix filter using slash\u2011separated names"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"read_secret_metadata(name: str) -> dict"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Returns current version, versions (timestamps/enabled), and ",(0,s.jsx)(r.code,{children:"custom_metadata"})," (tags)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"update_custom_metadata(name: str, custom: dict, merge=True) -> None"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Maps to KV tags (merge or replace)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.code,{children:"get_latest_version(name: str) -> Optional[str>"})}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"sequence-get_credentials",children:"Sequence: get_credentials"}),"\n",(0,s.jsx)(r.mermaid,{value:'sequenceDiagram\r\n  autonumber\r\n  participant App as Application\r\n  participant VS as VaultService\r\n  participant AZ as AzureKeyVaultStrategy\r\n  participant CB as CircuitBreaker\r\n  participant KV as Azure Key Vault\r\n  participant OT as OpenTelemetry\r\n  participant KF as Kafka\r\n\r\n  App->>VS: get_credentials("azure://vault/app/db#username?version=v1")\r\n  VS->>AZ: get_credentials(ref)\r\n  AZ->>OT: start span azure.get_secret\r\n  AZ->>CB: before_call()\r\n  alt Circuit closed\r\n    AZ->>KV: get_secret(name="app/db", version="v1")\r\n    KV--\x3e>AZ: Secret(value)\r\n    AZ->>AZ: parse JSON + extract fragment\r\n    AZ->>OT: span success\r\n    AZ--\x3e>VS: { "username": "..." }\r\n  else Circuit open\r\n    AZ--\x3e>VS: VaultTimeoutError\r\n  end\r\n  Note right of AZ: On delete: publish EventType.SECRET_VERSION_DELETED\r\n  AZ->>KF: publish_secret_event(...)'}),"\n",(0,s.jsx)(r.h2,{id:"security--authorization",children:"Security & authorization"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Enforce PDP checks in front of the provider (",(0,s.jsx)(r.code,{children:"ENABLE_AUTHORIZATION=true"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:["Require auth on ",(0,s.jsx)(r.code,{children:"/api/secrets/*"})," (",(0,s.jsx)(r.code,{children:"SECRETS_API_REQUIRE_AUTH=true"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:["Scope enforcement recommended (",(0,s.jsx)(r.code,{children:"SECRETS_ENFORCE_SCOPES=true"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:["Tenant guard: ",(0,s.jsx)(r.code,{children:"TENANT_ID"}),", ",(0,s.jsx)(r.code,{children:"TENANT_ALLOWED_MOUNTS"})," restrict accessible mounts/paths"]}),"\n",(0,s.jsx)(r.li,{children:"Sender binding: prefer DPoP or mTLS for grant usage"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"observability--audit",children:"Observability & audit"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Tracing: spans per operation (e.g., ",(0,s.jsx)(r.code,{children:"azure.get_secret"}),", ",(0,s.jsx)(r.code,{children:"azure.create_secret"}),", ",(0,s.jsx)(r.code,{children:"azure.update_secret"}),", ",(0,s.jsx)(r.code,{children:"azure.delete_secret"}),", ",(0,s.jsx)(r.code,{children:"azure.list_secrets"}),", ",(0,s.jsx)(r.code,{children:"azure.read_secret_metadata"}),", ",(0,s.jsx)(r.code,{children:"azure.update_custom_metadata"}),") with attributes ",(0,s.jsx)(r.code,{children:"secret.name"}),", ",(0,s.jsx)(r.code,{children:"secret.version"})," (or ",(0,s.jsx)(r.code,{children:"latest"}),")"]}),"\n",(0,s.jsx)(r.li,{children:"Metrics: emitted via OTEL exporters \u2192 Prometheus"}),"\n",(0,s.jsxs)(r.li,{children:["Auditing: on delete, emits ",(0,s.jsx)(r.code,{children:"EventType.SECRET_VERSION_DELETED"})," via ",(0,s.jsx)(r.code,{children:"CrudKafkaProducer"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"credential_id"}),": ",(0,s.jsx)(r.code,{children:"azure://vault/<name>"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"resource_ref"}),": HMAC\u2011masked when ",(0,s.jsx)(r.code,{children:"TENANT_SALT"})," or ",(0,s.jsx)(r.code,{children:"SECRET_TENANT_SALT"})," is set"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(r.p,{children:"Required:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"vault_url"}),": ",(0,s.jsx)(r.code,{children:"https://<vault-name>.vault.azure.net/"})]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Optional:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"managed_identity_client_id"}),": prefer Managed Identity when present"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"timeout_s"})," (default 30), ",(0,s.jsx)(r.code,{children:"max_retries"})," (default 3)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"cb_failure_threshold"})," (default 5), ",(0,s.jsx)(r.code,{children:"cb_reset_timeout_s"})," (default 30)"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Configuration should be supplied via service env/compose; avoid per\u2011app ",(0,s.jsx)(r.code,{children:".env"})," files."]}),"\n",(0,s.jsx)(r.h2,{id:"error-semantics-normalized",children:"Error semantics (normalized)"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"VaultSecretNotFoundError"}),": secret or version not found"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"VaultAuthenticationError"}),": permission/auth failures (future mapping)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"VaultTimeoutError"}),": circuit breaker open or timeout"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"VaultOperationError"}),": generic provider errors"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"quick-usage",children:"Quick usage"}),"\n",(0,s.jsx)(r.p,{children:"Fetch a JSON field:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'creds = await strategy.get_credentials("azure://vault/app/db#username")\n'})}),"\n",(0,s.jsx)(r.p,{children:"Update tags/metadata:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'await strategy.update_custom_metadata("app/db", {"owner": "payments"}, merge=True)\n'})}),"\n",(0,s.jsx)(r.p,{children:"Delete and emit audit:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'await strategy.delete_credentials("app/db")\n'})}),"\n",(0,s.jsx)(r.h2,{id:"notes--limitations",children:"Notes & limitations"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Azure Key Vault does not support response wrapping; helpers in this provider are dev\u2011only stubs for parity with other providers"}),"\n",(0,s.jsx)(r.li,{children:"Hierarchical listing is emulated via prefix matching on slash\u2011separated names"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"related",children:"Related"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Platform overview: ",(0,s.jsx)(r.code,{children:"../index.md"})]}),"\n",(0,s.jsxs)(r.li,{children:["Authorization model (PDP): ",(0,s.jsx)(r.code,{children:"../11-authorization-model-authzen.md"})]}),"\n",(0,s.jsxs)(r.li,{children:["Observability: ",(0,s.jsx)(r.code,{children:"../06-observability.md"})]}),"\n",(0,s.jsxs)(r.li,{children:["Admin how\u2011to: ",(0,s.jsx)(r.code,{children:"../07-admin-howto.md"})]}),"\n",(0,s.jsxs)(r.li,{children:["API reference: ",(0,s.jsx)(r.code,{children:"../reference/secrets-api.md"}),"\r\nI'll embed two Mermaid diagrams: an architecture overview and a get_credentials sequence. Then I'll provide the detailed documentation text.\r\nRan tool\r\nRan tool"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"azure-key-vault-strategy",children:"Azure Key Vault Strategy"}),"\n",(0,s.jsx)(r.p,{children:"This document describes how to use the Azure Key Vault strategy in VaultService, including canonical URI syntax, supported operations, error semantics, observability, and audit behavior."}),"\n",(0,s.jsx)(r.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Provider: azure"}),"\n",(0,s.jsx)(r.li,{children:"Purpose: Retrieve and manage application secrets stored in Azure Key Vault"}),"\n",(0,s.jsxs)(r.li,{children:["Key features:","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Canonical URI parsing with fragments and version selection"}),"\n",(0,s.jsx)(r.li,{children:"Retries, circuit breaker, and request timeouts"}),"\n",(0,s.jsx)(r.li,{children:"OpenTelemetry tracing"}),"\n",(0,s.jsx)(r.li,{children:"Kafka audit events on delete"}),"\n",(0,s.jsx)(r.li,{children:"Metadata helpers (tags) and version discovery"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"architecture-1",children:"Architecture"}),"\n",(0,s.jsx)(r.p,{children:"[Mermaid] Architecture overview:"}),"\n",(0,s.jsx)(r.mermaid,{value:'flowchart LR\r\n  subgraph "Application"\r\n    A["Service code"]\r\n  end\r\n  subgraph "CRUDService"\r\n    VS["VaultService (caller)"]\r\n    AZ["AzureKeyVaultStrategy\\n`azure_vault_strategy.py`"]\r\n    CB["CircuitBreaker"]\r\n    OTEL["OpenTelemetry Spans\\n`azure.*`"]\r\n  end\r\n  subgraph "Azure Cloud"\r\n    KV["Azure Key Vault"]\r\n  end\r\n  subgraph "Analytics/Observability"\r\n    KAFKA["Kafka (audit events)"]\r\n  end\r\n\r\n  A --\x3e|"requests secret ops"| VS\r\n  VS --\x3e AZ\r\n  AZ --\x3e CB\r\n  AZ --\x3e OTEL\r\n  AZ --\x3e|"get/set/delete/list"| KV\r\n  AZ --\x3e|"publish delete audit"| KAFKA\r\n\r\n  classDef comp fill:#eef,stroke:#88a\r\n  classDef cloud fill:#efe,stroke:#8a8\r\n  classDef obs fill:#fee,stroke:#a88\r\n  class A comp\r\n  class VS,AZ,CB,OTEL comp\r\n  class KV cloud\r\n  class KAFKA obs'}),"\n",(0,s.jsx)(r.h3,{id:"canonical-uri-1",children:"Canonical URI"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Scheme: azure://"}),"\n",(0,s.jsx)(r.li,{children:"Mount: vault"}),"\n",(0,s.jsx)(r.li,{children:"Path: free-form name (supports slashes for logical grouping)"}),"\n",(0,s.jsx)(r.li,{children:"Fragment: optional key selector for JSON payloads"}),"\n",(0,s.jsx)(r.li,{children:"Query: optional version string"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Examples:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Full secret dict: ",(0,s.jsx)(r.code,{children:"azure://vault/app/db"})]}),"\n",(0,s.jsxs)(r.li,{children:["Single field: ",(0,s.jsx)(r.code,{children:"azure://vault/app/db#username"})]}),"\n",(0,s.jsxs)(r.li,{children:["Versioned read: ",(0,s.jsx)(r.code,{children:"azure://vault/app/db#username?version=v1"})]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Behavior:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["If secret value is JSON, returns parsed dict. With a fragment, returns ",(0,s.jsx)(r.code,{children:"{fragment: value}"}),"."]}),"\n",(0,s.jsxs)(r.li,{children:["If secret value is a scalar and a fragment is requested, returns ",(0,s.jsx)(r.code,{children:"{fragment: None}"}),"."]}),"\n",(0,s.jsx)(r.li,{children:"Versions are treated as strings (Azure version IDs)."}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"api-surface",children:"API Surface"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["get_credentials(ref: str) -> dict","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Accepts canonical URIs or raw secret names"}),"\n",(0,s.jsx)(r.li,{children:"Uses retries, circuit breaker, timeouts"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["create_credentials(name: str, data: dict) -> dict","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Stores JSON-serialized value; creates a new version"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["update_credentials(name: str, data: dict) -> dict","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Validates existence; creates a new version"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["delete_credentials(name: str) -> bool","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Soft-deletes the secret (per Key Vault settings) and emits a Kafka audit event"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["list_credentials() -> list[str]","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Returns all secret names"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["list_keys(path: str) -> list[str]","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Prefix filter using slash-separated names"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["read_secret_metadata(name: str) -> dict","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Returns current version, versions list (with timestamps and enablement), and custom_metadata (tags)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["update_custom_metadata(name: str, custom: dict, merge=True) -> None","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Maps to Key Vault tags (merge or replace)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.li,{children:"get_latest_version(name: str) -> Optional[str]"}),"\n",(0,s.jsxs)(r.li,{children:["get_credentials_wrapped(ref: str, wrap_ttl: str) -> dict","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Dev-friendly stub returning a wrap token"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["unwrap_token(wrap_token: str) -> dict","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Dev-friendly stub with a success payload"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"error-semantics",children:"Error Semantics"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"VaultSecretNotFoundError: secret or version not found"}),"\n",(0,s.jsx)(r.li,{children:"VaultAuthenticationError: permission/auth failures (future mapping)"}),"\n",(0,s.jsx)(r.li,{children:"VaultTimeoutError: circuit breaker open or timeout"}),"\n",(0,s.jsx)(r.li,{children:"VaultOperationError: generic provider errors"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"All errors are normalized for consistent handling across providers."}),"\n",(0,s.jsx)(r.h3,{id:"observability",children:"Observability"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Tracing: Spans per operation with attributes:","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"azure.get_secret, azure.create_secret, azure.update_secret, azure.delete_secret, azure.list_secrets, azure.read_secret_metadata, azure.update_custom_metadata"}),"\n",(0,s.jsx)(r.li,{children:"Attributes: secret.name, secret.version (or \u201clatest\u201d)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.li,{children:"Metrics: leverage OpenTelemetry exporters configured globally"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"auditing",children:"Auditing"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["On delete: emits EventType.SECRET_VERSION_DELETED to Kafka via ",(0,s.jsx)(r.code,{children:"CrudKafkaProducer"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["credential_id: ",(0,s.jsx)(r.code,{children:"azure://vault/<name>"})]}),"\n",(0,s.jsx)(r.li,{children:"resource_ref: hashed reference when TENANT_SALT or SECRET_TENANT_SALT is set"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"sequence-for-get_credentials",children:"Sequence for get_credentials"}),"\n",(0,s.jsx)(r.p,{children:"[Mermaid] Sequence diagram:"}),"\n",(0,s.jsx)(r.mermaid,{value:'sequenceDiagram\r\n  autonumber\r\n  participant App as Application\r\n  participant VS as VaultService\r\n  participant AZ as AzureKeyVaultStrategy\r\n  participant CB as CircuitBreaker\r\n  participant KV as Azure Key Vault\r\n  participant OT as OpenTelemetry\r\n  participant KF as Kafka\r\n\r\n  App->>VS: get_credentials("azure://vault/app/db#username?version=v1")\r\n  VS->>AZ: get_credentials(ref)\r\n  AZ->>OT: start span azure.get_secret\r\n  AZ->>CB: before_call()\r\n  alt Circuit closed\r\n    AZ->>KV: get_secret(name="app/db", version="v1")\r\n    KV--\x3e>AZ: Secret(value)\r\n    AZ->>AZ: parse JSON + extract fragment\r\n    AZ->>OT: span success\r\n    AZ--\x3e>VS: { "username": "..." }\r\n  else Circuit open\r\n    AZ--\x3e>VS: VaultTimeoutError\r\n  end\r\n  Note right of AZ: On delete: publish EventType.SECRET_VERSION_DELETED\r\n  AZ->>KF: publish_secret_event(...)'}),"\n",(0,s.jsx)(r.h3,{id:"configuration-1",children:"Configuration"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Required:","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["vault_url: ",(0,s.jsx)(r.code,{children:"https://<vault-name>.vault.azure.net/"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["Optional:","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"managed_identity_client_id: use Managed Identity when present"}),"\n",(0,s.jsx)(r.li,{children:"timeout_s (default 30), max_retries (default 3)"}),"\n",(0,s.jsx)(r.li,{children:"cb_failure_threshold (default 5), cb_reset_timeout_s (default 30)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Configuration is provided via service environment/compose. Avoid per-app .env files."}),"\n",(0,s.jsx)(r.h3,{id:"return-shapes",children:"Return Shapes"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["JSON secrets: returns dict; with fragment \u2192 ",(0,s.jsx)(r.code,{children:"{fragment: value}"})]}),"\n",(0,s.jsxs)(r.li,{children:["Scalar secrets: returns ",(0,s.jsx)(r.code,{children:'{value: "<scalar>"}'}),"; with fragment \u2192 ",(0,s.jsx)(r.code,{children:"{fragment: None}"})]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"notes-and-limitations",children:"Notes and Limitations"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Response wrapping is not natively supported by Azure Key Vault; provided helpers are dev stubs for caller parity."}),"\n",(0,s.jsx)(r.li,{children:"Hierarchical listing is emulated via prefix matching on slash-separated secret names."}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"quick-usage-1",children:"Quick Usage"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Fetch JSON field:"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'creds = await strategy.get_credentials("azure://vault/app/db#username")\n'})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Update metadata/tags:"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'await strategy.update_custom_metadata("app/db", {"owner": "payments"}, merge=True)\n'})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Delete and audit:"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'await strategy.delete_credentials("app/db")\n'})})]})}function o(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);