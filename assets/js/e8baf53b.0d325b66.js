"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[9671],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var s=i(96540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},63646:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"source_content/AI_Spend_Effective_Budgets","title":"AI Spend \u2013 Effective Budgets (Policy + Analytics)","description":"Goal","source":"@site/docs/source_content/AI_Spend_Effective_Budgets.md","sourceDirName":"source_content","slug":"/source_content/AI_Spend_Effective_Budgets","permalink":"/empowernow_docs/docs/source_content/AI_Spend_Effective_Budgets","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/source_content/AI_Spend_Effective_Budgets.md","tags":[],"version":"current","frontMatter":{}}');var t=i(74848),r=i(28453);const l={},c="AI Spend \u2013 Effective Budgets (Policy + Analytics)",d={},o=[{value:"Goal",id:"goal",level:2},{value:"What changed",id:"what-changed",level:2},{value:"High-level design",id:"high-level-design",level:2},{value:"Components",id:"components",level:3},{value:"Endpoint contract",id:"endpoint-contract",level:2},{value:"Policy model",id:"policy-model",level:2},{value:"PDP behavior (effective limit selection)",id:"pdp-behavior-effective-limit-selection",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Frontend usage",id:"frontend-usage",level:2},{value:"Operations",id:"operations",level:2},{value:"Error handling and caching",id:"error-handling-and-caching",level:2},{value:"Appendix: Example snapshots",id:"appendix-example-snapshots",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"ai-spend--effective-budgets-policy--analytics",children:"AI Spend \u2013 Effective Budgets (Policy + Analytics)"})}),"\n",(0,t.jsx)(n.h2,{id:"goal",children:"Goal"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Unify policy-defined budget limits with Analytics counters so users always see a budget even when no explicit override exists."}),"\n",(0,t.jsx)(n.li,{children:"Prefer Analytics overrides when configured; otherwise, derive defaults from PDP policies."}),"\n",(0,t.jsx)(n.li,{children:"Provide a fast, cache-friendly endpoint for UIs to fetch the \u201ceffective\u201d limit and remaining."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"what-changed",children:"What changed"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["PDP now exposes ",(0,t.jsx)(n.code,{children:"GET /access/v1/budgets/effective"})," returning a snapshot of the effective budgets for the authenticated subject."]}),"\n",(0,t.jsx)(n.li,{children:"PDP spend enforcement prefers Analytics override limits when present; otherwise uses policy defaults. The decision\u2019s context includes the effective limit used."}),"\n",(0,t.jsxs)(n.li,{children:["BFF proxies the PDP endpoint. Frontend falls back to policy-derived limits when Analytics returns null for ",(0,t.jsx)(n.code,{children:"limit_usd"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"high-level-design",children:"High-level design"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Source of truth for usage (consumed) remains Analytics. Limits can come from either:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Explicit Analytics overrides (",(0,t.jsx)(n.code,{children:"PUT /api/v1/analytics/budgets/limit"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Policy defaults (",(0,t.jsx)(n.code,{children:"spend_budget"})," constraints in PDP policies)"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"PDP merges these inputs and computes the effective limit and remaining. The UI reads this via the new endpoint."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"components",children:"Components"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Analytics: stores counters and optional per-subject limits in Redis; exposes ",(0,t.jsx)(n.code,{children:"budgets/state"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["PDP: evaluates ",(0,t.jsx)(n.code,{children:"spend_budget"})," constraints and consults Analytics via BudgetState PIP; computes effective limit."]}),"\n",(0,t.jsx)(n.li,{children:"BFF: proxies the new PDP endpoint for the SPA."}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\r\n  autonumber\r\n  participant UI as SPA\r\n  participant B as BFF\r\n  participant P as PDP\r\n  participant A as Analytics\r\n  participant R as Redis\r\n\r\n  UI->>B: GET /access/v1/budgets/effective\r\n  B->>P: GET /access/v1/budgets/effective\r\n  P->>A: GET /api/v1/analytics/budgets/state (user daily/monthly)\r\n  A->>R: read counters+overrides\r\n  A--\x3e>P: {consumed, limit?}\r\n  P--\x3e>B: {snapshot: [{limit_usd, consumed_usd, remaining_policy_usd}]}\r\n  B--\x3e>UI: 200 JSON (short-cache)"}),"\n",(0,t.jsx)(n.h2,{id:"endpoint-contract",children:"Endpoint contract"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GET /access/v1/budgets/effective"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Auth: session"}),"\n",(0,t.jsxs)(n.li,{children:["Query: ",(0,t.jsx)(n.code,{children:"scope?=user|team|tenant"})," (default user), ",(0,t.jsx)(n.code,{children:"period?=daily|monthly"})," (optional)"]}),"\n",(0,t.jsx)(n.li,{children:"Response:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "snapshot": [\r\n    {\r\n      "scope": "user",\r\n      "period": "monthly",\r\n      "selector": { "category": null, "provider": null, "model": null },\r\n      "limit_usd": 50.0,\r\n      "consumed_usd": 12.34,\r\n      "remaining_policy_usd": 37.66,\r\n      "decision": "allow|deny",\r\n      "reason": null\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Notes:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"limit_usd"})," is the effective limit (Analytics override if present, else policy default)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"remaining_policy_usd"})," is computed as ",(0,t.jsx)(n.code,{children:"max(limit_usd - consumed, 0)"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Multiple entries may appear when policies include provider/model/category selectors."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"policy-model",children:"Policy model"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Constraints use ",(0,t.jsx)(n.code,{children:'type: "spend_budget"'}),". Examples:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# User monthly default\r\nparameters: { scope: "user", period: "monthly", limit_usd: 50.0 }\r\n# Category-specific\r\nparameters: { scope: "user", period: "monthly", limit_usd: 20.0, category: "dev" }\r\n# Provider-specific\r\nparameters: { scope: "user", period: "monthly", limit_usd: 25.0, provider: "openai" }\r\n# Model-specific\r\nparameters: { scope: "user", period: "monthly", limit_usd: 15.0, model: "gpt-4o-mini" }\n'})}),"\n",(0,t.jsx)(n.h2,{id:"pdp-behavior-effective-limit-selection",children:"PDP behavior (effective limit selection)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Query Analytics via BudgetState PIP for each relevant pool (overall, category, provider, model)."}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"state.limit_usd"})," is not null, treat as override (effective limit = ",(0,t.jsx)(n.code,{children:"state.limit_usd"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["Else use policy\u2019s ",(0,t.jsx)(n.code,{children:"limit_usd"})," for that pool. Compute remaining accordingly."]}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart TD\r\n  A[Policy spend_budget entries] --\x3e B[BudgetState PIP fetch per pool]\r\n  B --\x3e C{state.limit_usd present?}\r\n  C -- yes --\x3e D[effective_limit = state.limit_usd]\r\n  C -- no --\x3e E[effective_limit = policy.limit_usd]\r\n  D --\x3e F[remaining = max(effective_limit - consumed, 0)]\r\n  E --\x3e F\r\n  F --\x3e G[Attach spend_snapshot / return to UI]"}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"BFF route (ServiceConfigs/BFF/config/routes.yaml):"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'- id: "authzen-effective-budgets"\r\n  path: "/access/v1/budgets/effective"\r\n  target_service: "pdp_service"\r\n  upstream_path: "/access/v1/budgets/effective"\r\n  methods: ["GET", "OPTIONS"]\r\n  auth: "session"\r\n  preserve_path: true\r\n  authz: "none"\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["PDP PIP registry: ensure BudgetState PIP is enabled and ",(0,t.jsx)(n.code,{children:"analytics_url"})," points at Analytics."]}),"\n",(0,t.jsxs)(n.li,{children:["Policies: place ",(0,t.jsx)(n.code,{children:"spend_budget"})," constraints under appropriate policies (global, app, or domain) with merge strategy = most-restrictive (default)."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"frontend-usage",children:"Frontend usage"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Call ",(0,t.jsx)(n.code,{children:"GET /api/v1/analytics/budgets/state"})," as before; if ",(0,t.jsx)(n.code,{children:"limit_usd"})," is null, call ",(0,t.jsx)(n.code,{children:"/access/v1/budgets/effective"})," and display the effective limit/remaining for the overall pool."]}),"\n",(0,t.jsxs)(n.li,{children:["The SPA already performs this fallback in ",(0,t.jsx)(n.code,{children:"AISpendPage"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["To set an explicit override: ",(0,t.jsx)(n.code,{children:"PUT /api/v1/analytics/budgets/limit { tenant_id, scope, subject_id, period, limit_usd }"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["To adjust defaults: update PDP policies (",(0,t.jsx)(n.code,{children:"spend_budget"})," constraints) and deploy."]}),"\n",(0,t.jsx)(n.li,{children:"To verify end-to-end:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 1) Check Analytics state (will be null for limit if no override)\r\ncurl -sS "$BFF/api/v1/analytics/budgets/state?tenant_id=default&scope=user&period=monthly" | jq\r\n\r\n# 2) Check effective budgets (should reflect policy default)\r\ncurl -sS "$BFF/access/v1/budgets/effective" | jq\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling-and-caching",children:"Error handling and caching"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["PDP endpoint returns 200 with ",(0,t.jsx)(n.code,{children:"snapshot: []"})," when no applicable constraints exist."]}),"\n",(0,t.jsx)(n.li,{children:"BudgetState PIP uses short timeouts (~300ms) and a 2s in-memory TTL cache to keep the endpoint fast under load."}),"\n",(0,t.jsx)(n.li,{children:"BFF route is session-authenticated and not cached by proxies; the SPA may use a short SWR (5\u201310s) if desired."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"appendix-example-snapshots",children:"Appendix: Example snapshots"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "snapshot": [\r\n    { "scope": "user", "period": "daily", "selector": {}, "limit_usd": 5.0,  "consumed_usd": 0.66, "remaining_policy_usd": 4.34 },\r\n    { "scope": "user", "period": "monthly", "selector": {}, "limit_usd": 50.0, "consumed_usd": 7.88, "remaining_policy_usd": 42.12 },\r\n    { "scope": "user", "period": "monthly", "selector": {"category": "dev"}, "limit_usd": 20.0, "consumed_usd": 1.25, "remaining_policy_usd": 18.75 }\r\n  ]\r\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);