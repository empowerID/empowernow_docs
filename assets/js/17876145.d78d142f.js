"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[5254],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var i=r(96540);const s={},l=i.createContext(s);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(l.Provider,{value:n},e.children)}},85687:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"source_content/Dynamic_Model_Routing","title":"Dynamic_Model_Routing","description":"EmpowerNow Dynamic AI Model Routing (v1)","source":"@site/docs/source_content/Dynamic_Model_Routing.md","sourceDirName":"source_content","slug":"/source_content/Dynamic_Model_Routing","permalink":"/empowernow_docs/docs/source_content/Dynamic_Model_Routing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/source_content/Dynamic_Model_Routing.md","tags":[],"version":"current","frontMatter":{}}');var s=r(74848),l=r(28453);const t={},d=void 0,o={},c=[{value:"EmpowerNow Dynamic AI Model Routing (v1)",id:"empowernow-dynamic-ai-model-routing-v1",level:2},{value:"Quickstart",id:"quickstart",level:3},{value:"How\u2011to tasks",id:"howto-tasks",level:3},{value:"Enable dynamic model routing",id:"enable-dynamic-model-routing",level:4},{value:"Override model pricing for an environment",id:"override-model-pricing-for-an-environment",level:4},{value:"Configure budgets with PDP",id:"configure-budgets-with-pdp",level:4},{value:"Observe rerouting and receipts",id:"observe-rerouting-and-receipts",level:4},{value:"Troubleshoot",id:"troubleshoot",level:4},{value:"Reference cheat sheet",id:"reference-cheat-sheet",level:3},{value:"FAQ",id:"faq",level:3},{value:"Overview",id:"overview",level:3},{value:"How it works (v1)",id:"how-it-works-v1",level:3},{value:"Real scenarios",id:"real-scenarios",level:3},{value:"Policy examples (PDP)",id:"policy-examples-pdp",level:3},{value:"Realistic policy pack (prod-like)",id:"realistic-policy-pack-prod-like",level:4},{value:"Sample PDP requests and responses",id:"sample-pdp-requests-and-responses",level:3},{value:"Allow path",id:"allow-path",level:4},{value:"Deny path (budget)",id:"deny-path-budget",level:4},{value:"Optional: provider/model/category budgets (v1.x)",id:"optional-providermodelcategory-budgets-v1x",level:4},{value:"Configuration",id:"configuration",level:3},{value:"Code entry points",id:"code-entry-points",level:3},{value:"Algorithm details (v1)",id:"algorithm-details-v1",level:3},{value:"Test coverage",id:"test-coverage",level:3},{value:"Ops notes",id:"ops-notes",level:3},{value:"Roadmap (v2)",id:"roadmap-v2",level:3},{value:"TL;DR",id:"tldr",level:3},{value:"Mermaid: v1 request flow (sequence)",id:"mermaid-v1-request-flow-sequence",level:3},{value:"Mermaid: v1 routing decision (flowchart)",id:"mermaid-v1-routing-decision-flowchart",level:3},{value:"Mermaid: v2 concept (provider switching)",id:"mermaid-v2-concept-provider-switching",level:3}];function a(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"empowernow-dynamic-ai-model-routing-v1",children:"EmpowerNow Dynamic AI Model Routing (v1)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'doc_builder:\r\n  source: docs/source_content/Dynamic_Model_Routing.md\r\n  version: v1\r\n  tags: [service:bff, area:llm, feature:dynamic-model-routing]\r\n  outputs:\r\n    - type: explanation\r\n      title: "Dynamic AI Model Routing \u2014 How It Works"\r\n      target: "/docs/services/bff/explanation/llm-dynamic-model-routing"\r\n      sections:\r\n        - Overview\r\n        - How it works (v1)\r\n        - Key properties\r\n        - Real scenarios\r\n        - Algorithm details (v1)\r\n        - Roadmap (v2)\r\n    - type: tutorial\r\n      title: "LLM Routing Quickstart"\r\n      target: "/docs/services/bff/tutorials/llm-routing-quickstart"\r\n      sections:\r\n        - Quickstart\r\n        - Validate\r\n    - type: how-to\r\n      title: "Enable Dynamic Model Routing"\r\n      target: "/docs/services/bff/how-to/llm-routing-enable"\r\n      sections:\r\n        - How to: Enable routing (PDP + env)\r\n    - type: how-to\r\n      title: "Override Model Pricing"\r\n      target: "/docs/services/bff/how-to/llm-routing-pricing"\r\n      sections:\r\n        - How to: Pricing overrides\r\n    - type: how-to\r\n      title: "Configure Budgets"\r\n      target: "/docs/services/bff/how-to/llm-routing-budgets"\r\n      sections:\r\n        - How to: Budget holds and receipts\r\n    - type: how-to\r\n      title: "Observe & Troubleshoot Routing"\r\n      target: "/docs/services/bff/how-to/llm-routing-observability"\r\n      sections:\r\n        - Observability\r\n        - Troubleshooting\r\n    - type: reference\r\n      title: "LLM Routing: Configuration Reference"\r\n      target: "/docs/services/bff/reference/llm-routing-config"\r\n      sections:\r\n        - Configuration\r\n        - Headers\r\n        - Code entry points\r\n    - type: reference\r\n      title: "LLM Routing: PDP Fields"\r\n      target: "/docs/services/bff/reference/llm-routing-pdp"\r\n      sections:\r\n        - Policy examples\r\n        - Sample PDP requests and responses\n'})}),"\n",(0,s.jsx)(n.h3,{id:"quickstart",children:"Quickstart"}),"\n",(0,s.jsx)(n.p,{children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["BFF deployed with ",(0,s.jsx)(n.code,{children:"/chat/completions"})," endpoint enabled"]}),"\n",(0,s.jsxs)(n.li,{children:["PDP reachable with policy that returns ",(0,s.jsx)(n.code,{children:"constraints.model.allow"}),", ",(0,s.jsx)(n.code,{children:"constraints.tokens"}),", and ",(0,s.jsx)(n.code,{children:"constraints.egress"})]}),"\n",(0,s.jsx)(n.li,{children:"Redis available for budget holds (prod) or in\u2011process stub (dev)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'Ensure PDP policy returns model/egress allowlists and (optionally) budgets. See "Policy examples (PDP)" below.'}),"\n",(0,s.jsxs)(n.li,{children:["Configure pricing and budgets:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"LLM_PRICING_JSON"})," or ",(0,s.jsx)(n.code,{children:"LLM_PRICING_PATH"})," (JSON map of model prices)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"REDIS_URL"})," (enterprise budget holds)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RECEIPT_VAULT_URL"})," (optional receipts)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Call the API with a potentially disallowed/expensive model:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -sS -X POST "$BFF/api/chat/completions" \\\r\n  -H "Content-Type: application/json" \\\r\n  --data \'{\r\n    "model": "gpt-4.1",\r\n    "messages": [{"role":"user","content":"Summarize our budget policy"}],\r\n    "max_tokens": 256\r\n  }\' -i\n'})}),"\n",(0,s.jsx)(n.p,{children:"Validate"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Response headers include ",(0,s.jsx)(n.code,{children:"x-aria-model-selected"})," and ",(0,s.jsx)(n.code,{children:"x-aria-model-rerouted: true|false"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"402 indicates budget denial (no affordable allowed model) on the BFF path. MCP Gateway does not return 402."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"howto-tasks",children:"How\u2011to tasks"}),"\n",(0,s.jsx)(n.h4,{id:"enable-dynamic-model-routing",children:"Enable dynamic model routing"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Add/verify PDP policy for ",(0,s.jsx)(n.code,{children:"llm:openai:chat"})," with model and egress allowlists."]}),"\n",(0,s.jsxs)(n.li,{children:["Provide pricing via ",(0,s.jsx)(n.code,{children:"LLM_PRICING_JSON"})," or ",(0,s.jsx)(n.code,{children:"LLM_PRICING_PATH"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.code,{children:"REDIS_URL"})," for production budget holds (optional in dev)."]}),"\n",(0,s.jsx)(n.li,{children:"Deploy BFF; confirm headers on responses for rerouted calls."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"override-model-pricing-for-an-environment",children:"Override model pricing for an environment"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"LLM_PRICING_JSON"})," to inject a map at runtime:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "gpt-4o-mini": { "in": 0.00015, "out": 0.0006 },\r\n  "gpt-4.1":     { "in": 0.0005,  "out": 0.0015 }\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"configure-budgets-with-pdp",children:"Configure budgets with PDP"}),"\n",(0,s.jsxs)(n.p,{children:["Return a ",(0,s.jsx)(n.code,{children:"spend_budget"})," constraint and enable the BudgetState PIP:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'rules:\r\n  - effect: permit\r\n    resource: "llm:openai:chat"\r\n    action: "invoke"\r\n    on_permit:\r\n      constraints:\r\n        spend_budget: { scope: "user", period: "monthly", limit_usd: 25.0 }\n'})}),"\n",(0,s.jsx)(n.h4,{id:"observe-rerouting-and-receipts",children:"Observe rerouting and receipts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Check headers: ",(0,s.jsx)(n.code,{children:"x-aria-model-selected"}),", ",(0,s.jsx)(n.code,{children:"x-aria-model-rerouted"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Enable receipts to verify captured ",(0,s.jsx)(n.code,{children:"decision_id"}),", usage, and policy snapshot."]}),"\n",(0,s.jsxs)(n.li,{children:["Add metric counters (suggested): ",(0,s.jsx)(n.code,{children:"bff_llm_model_downgrades_total{reason}"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"troubleshoot",children:"Troubleshoot"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["403 with ",(0,s.jsx)(n.code,{children:"deny"}),": verify PDP allowlist (",(0,s.jsx)(n.code,{children:"constraints.model.allow"}),") and egress pins."]}),"\n",(0,s.jsxs)(n.li,{children:["402: pricing or budgets make all candidates unaffordable; lower ",(0,s.jsx)(n.code,{children:"max_tokens"})," or adjust pricing/budget (BFF)."]}),"\n",(0,s.jsx)(n.li,{children:"No reroute header: requested model was allowed within budget; no routing occurred."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"reference-cheat-sheet",children:"Reference cheat sheet"}),"\n",(0,s.jsx)(n.p,{children:"Endpoints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"POST /chat/completions"})," \u2014 chat request entry point"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Environment"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"LLM_PRICING_JSON"})," or ",(0,s.jsx)(n.code,{children:"LLM_PRICING_PATH"})," \u2014 pricing map for estimation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"REDIS_URL"})," \u2014 budget holds (prod)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RECEIPT_VAULT_URL"})," \u2014 receipt logging (optional)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Headers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Response: ",(0,s.jsx)(n.code,{children:"x-aria-decision-id"}),", ",(0,s.jsx)(n.code,{children:"x-aria-model-selected"}),", ",(0,s.jsx)(n.code,{children:"x-aria-model-rerouted"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"PDP context fields (request)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"provider"}),", ",(0,s.jsx)(n.code,{children:"model"}),", ",(0,s.jsx)(n.code,{children:"estimated_cents"}),", optional ",(0,s.jsx)(n.code,{children:"tenant_id"}),", ",(0,s.jsx)(n.code,{children:"category"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Code touchpoints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Endpoint: ",(0,s.jsx)(n.code,{children:"ms_bff/src/api/v1/endpoints/llm.py"})]}),"\n",(0,s.jsxs)(n.li,{children:["Enforcement: ",(0,s.jsx)(n.code,{children:"ms_bff/src/services/llm_enforcement.py"})]}),"\n",(0,s.jsxs)(n.li,{children:["Budget: ",(0,s.jsx)(n.code,{children:"ms_bff/src/services/llm_budget.py"})]}),"\n",(0,s.jsxs)(n.li,{children:["Receipts: ",(0,s.jsx)(n.code,{children:"ms_bff/src/services/llm_receipts.py"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"faq",children:"FAQ"}),"\n",(0,s.jsxs)(n.p,{children:["Q: Why 402 vs 403?",(0,s.jsx)(n.br,{}),"\n","A: 402 = budget insufficient for any allowed candidate. 403 = policy denial (no allowed candidates or egress blocked)."]}),"\n",(0,s.jsxs)(n.p,{children:["Q: How do I disable rerouting?",(0,s.jsx)(n.br,{}),"\n","A: Constrain policy so only one model is allowed (no cheaper candidates). A feature flag can be introduced later if strict failures are desired."]}),"\n",(0,s.jsxs)(n.p,{children:["Q: Does rerouting ever widen policy?",(0,s.jsx)(n.br,{}),"\n","A: No. Candidates must be within PDP ",(0,s.jsx)(n.code,{children:"constraints.model.allow"})," and ",(0,s.jsx)(n.code,{children:"constraints.egress.allow"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Dynamic Model Routing lets the BFF transparently select an allowed, affordable LLM model when the requested model is disallowed by policy or unaffordable given live budgets. In v1, routing is model-only within a single provider (OpenAI); v2 will add dynamic provider switching (e.g., OpenAI \u21c4 Anthropic \u21c4 Ollama) using the same policy and budget semantics."}),"\n",(0,s.jsx)(n.p,{children:"Why this matters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cost control: keep calls under per-user/tenant budgets without hard failures."}),"\n",(0,s.jsx)(n.li,{children:"Policy compliance: enforce model allowlists and egress pins while preserving user intent."}),"\n",(0,s.jsx)(n.li,{children:"Better UX: avoid 403/402 errors by offering a viable alternative automatically."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works-v1",children:"How it works (v1)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["BFF receives a chat request with a requested ",(0,s.jsx)(n.code,{children:"model"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["BFF evaluates PDP (AuthZEN/ARIA v1): gets ",(0,s.jsx)(n.code,{children:"constraints"})," (e.g., ",(0,s.jsx)(n.code,{children:"model.allow"}),", ",(0,s.jsx)(n.code,{children:"tokens.*"}),", ",(0,s.jsx)(n.code,{children:"egress.allow"}),") and optional ",(0,s.jsx)(n.code,{children:"spend_snapshot"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Preflight enforcement applies prompt guard, masking, and token clamps."}),"\n",(0,s.jsx)(n.li,{children:"Budget hold is attempted based on a local cost estimate."}),"\n",(0,s.jsxs)(n.li,{children:["If the model is disallowed, or if budget hold fails, BFF sorts candidate models by estimated cost and re-evaluates PDP per candidate with ",(0,s.jsx)(n.code,{children:"estimated_cents"}),"; the first allowed candidate becomes the selected model."]}),"\n",(0,s.jsx)(n.li,{children:"Egress is re-pinned and preflight re-applied for the selected model; request proceeds, settle/receipt emitted."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Key properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Always PDP-driven: BFF never bypasses policy; it queries PDP per candidate."}),"\n",(0,s.jsxs)(n.li,{children:["Live budget-aware: takes ",(0,s.jsx)(n.code,{children:"estimated_cents"})," into account; deny \u2192 try next candidate."]}),"\n",(0,s.jsxs)(n.li,{children:["Transparent: headers ",(0,s.jsx)(n.code,{children:"x-aria-model-selected"})," and ",(0,s.jsx)(n.code,{children:"x-aria-model-rerouted"})," signal routing."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"real-scenarios",children:"Real scenarios"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Developer hits a monthly cap on ",(0,s.jsx)(n.code,{children:"gpt-4.1"}),": BFF downgrades to ",(0,s.jsx)(n.code,{children:"gpt-4o-mini"})," and completes the request."]}),"\n",(0,s.jsxs)(n.li,{children:["Tenant policy only allows ",(0,s.jsx)(n.code,{children:"gpt-4o-mini"}),": requests to ",(0,s.jsx)(n.code,{children:"gpt-4.1"})," are routed to ",(0,s.jsx)(n.code,{children:"gpt-4o-mini"})," automatically."]}),"\n",(0,s.jsx)(n.li,{children:"High-traffic hours (budget tight): PDP denies expensive model; BFF finds a cheaper model that fits remaining budget."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"policy-examples-pdp",children:"Policy examples (PDP)"}),"\n",(0,s.jsx)(n.p,{children:"Allow only specific models (BFF normalizes typed constraints to bucketed):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'rules:\r\n  - effect: permit\r\n    resource: "llm:openai:chat"\r\n    action: "invoke"\r\n    on_permit:\r\n      constraints:\r\n        model:   { allow: ["gpt-4o-mini", "gpt-4.1"] }\r\n        tokens:  { max_output: 1500, max_stream: 4096 }\r\n        egress:  { allow: ["api.openai.com:443"] }\n'})}),"\n",(0,s.jsx)(n.p,{children:"With budgets (AI Spend integration):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["PDP BudgetState PIP checks live Analytics counters and may deny with ",(0,s.jsx)(n.code,{children:"budget_insufficient_for_request"})," or return ",(0,s.jsx)(n.code,{children:"spend_snapshot"})," for observability."]}),"\n",(0,s.jsxs)(n.li,{children:["BFF includes ",(0,s.jsx)(n.code,{children:"provider"}),", ",(0,s.jsx)(n.code,{children:"model"}),", ",(0,s.jsx)(n.code,{children:"estimated_cents"}),", and (optionally) ",(0,s.jsx)(n.code,{children:"tenant_id"}),", ",(0,s.jsx)(n.code,{children:"category"})," in the PDP context."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"realistic-policy-pack-prod-like",children:"Realistic policy pack (prod-like)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# applications/aria-bff/openai-chat.yaml\r\nid: openai-chat-prod\r\nrules:\r\n  - id: allow-openai\r\n    resource: \"llm:openai:chat\"\r\n    action: \"invoke\"\r\n    effect: permit\r\n    when:\r\n      all:\r\n        - resource.properties.pdp_application == 'aria-bff'\r\n    on_permit:\r\n      constraints:\r\n        # overall allowlist\r\n        model: { allow: [ 'gpt-4o-mini', 'gpt-4.1' ] }\r\n        tokens: { max_output: 1500, max_stream: 4096 }\r\n        egress: { allow: [ 'api.openai.com:443' ] }\r\n        # (optional) policy-driven daily/monthly budgets evaluated by BudgetState PIP\r\n        spend_budget:\r\n          scope: 'user'\r\n          period: 'monthly'\r\n          limit_usd: 25.0\r\n\r\n  - id: deny-secret-models\r\n    resource: 'llm:*'\r\n    action: '*'\r\n    denyIf: resource.properties.model in ['gpt-secret']\n"})}),"\n",(0,s.jsx)(n.p,{children:"Notes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If you use typed constraints in your PDP, the BFF\u2019s ",(0,s.jsx)(n.code,{children:"policy_client"})," will normalize them into the bucketed shape above."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"spend_budget"})," entry is evaluated server-side by the PDP BudgetState PIP (see AI Spend doc); it does not require BFF changes."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"sample-pdp-requests-and-responses",children:"Sample PDP requests and responses"}),"\n",(0,s.jsx)(n.h4,{id:"allow-path",children:"Allow path"}),"\n",(0,s.jsx)(n.p,{children:"Request (BFF \u2192 PDP):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "subject": { "type": "account", "id": "auth:account:empowernow:alice" },\r\n  "action": { "name": "invoke" },\r\n  "resource": {\r\n    "type": "llm:openai:chat",\r\n    "properties": {\r\n      "pdp_application": "aria-bff",\r\n      "model": "gpt-4.1",\r\n      "stream": false\r\n    }\r\n  },\r\n  "context": {\r\n    "tenant_id": "acme",\r\n    "provider": "openai",\r\n    "model": "gpt-4.1",\r\n    "estimated_cents": 180,\r\n    "category": "dev"\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Response (PDP \u2192 BFF):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "decision": true,\r\n  "context": {\r\n    "constraints": {\r\n      "model": { "allow": ["gpt-4o-mini", "gpt-4.1"] },\r\n      "tokens": { "max_output": 1500, "max_stream": 4096 },\r\n      "egress": { "allow": ["api.openai.com:443"] }\r\n    },\r\n    "decision_id": "d8f2d2c9-3f0a-4f60-8dff-6d1cc6a3e5f3",\r\n    "spend_snapshot": {\r\n      "remaining_cents": 1180,\r\n      "limit_cents": 2500,\r\n      "period": "monthly",\r\n      "scope": "user",\r\n      "decision_basis": "pdp_budget_check_v1"\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"deny-path-budget",children:"Deny path (budget)"}),"\n",(0,s.jsx)(n.p,{children:"Request (BFF \u2192 PDP):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "subject": { "type": "account", "id": "auth:account:empowernow:alice" },\r\n  "action": { "name": "invoke" },\r\n  "resource": {\r\n    "type": "llm:openai:chat",\r\n    "properties": { "pdp_application": "aria-bff", "model": "gpt-4.1", "stream": false }\r\n  },\r\n  "context": { "tenant_id": "acme", "provider": "openai", "model": "gpt-4.1", "estimated_cents": 2200 }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Response (PDP \u2192 BFF):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "decision": false,\r\n  "context": {\r\n    "reason": "budget_insufficient_for_request",\r\n    "spend_snapshot": { "remaining_cents": 90, "limit_cents": 1000, "period": "daily", "scope": "user" },\r\n    "decision_id": "2f87b2b1-4a72-4e3b-8b53-50b5a9a4b1f1"\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, v1 routing kicks in: the BFF evaluates cheaper candidates (e.g., ",(0,s.jsx)(n.code,{children:"gpt-4o-mini"}),") with updated ",(0,s.jsx)(n.code,{children:"estimated_cents"}),". If PDP allows, the BFF reroutes and proceeds; otherwise it returns 402."]}),"\n",(0,s.jsx)(n.h4,{id:"optional-providermodelcategory-budgets-v1x",children:"Optional: provider/model/category budgets (v1.x)"}),"\n",(0,s.jsx)(n.p,{children:"Typed constraints example (PDP returns typed objects; BFF normalizes):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'rules:\r\n  - effect: permit\r\n    resource: "llm:openai:chat"\r\n    action: "invoke"\r\n    on_permit:\r\n      constraints:\r\n        # overall\r\n        spend_budget: { scope: "user", period: "monthly", limit_usd: 50.0 }\r\n        # provider scoped\r\n        spend_budget: { scope: "user", period: "monthly", limit_usd: 20.0, provider: "openai" }\r\n        # model scoped\r\n        spend_budget: { scope: "user", period: "monthly", limit_usd: 10.0, model: "gpt-4o-mini" }\r\n        # category scoped\r\n        spend_budget: { scope: "user", period: "monthly", limit_usd: 8.0, category: "entertainment" }\n'})}),"\n",(0,s.jsx)(n.p,{children:"Request context additions used by BFF:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "tenant_id": "acme",\r\n  "provider": "openai",\r\n  "model": "gpt-4o-mini",\r\n  "category": "dev",\r\n  "estimated_cents": 95\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"PDP evaluates all applicable pools (overall/provider/model/category) and denies if any remaining is insufficient; BFF reports the reroute headers when a cheaper allowed model is selected."}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Pricing map (used for estimates during routing):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Env: ",(0,s.jsx)(n.code,{children:"LLM_PRICING_JSON"})," or ",(0,s.jsx)(n.code,{children:"LLM_PRICING_PATH"})," (JSON: ",(0,s.jsx)(n.code,{children:'{ "gpt-4o-mini": {"in": <usd/token>, "out": <usd/token>}, ... }'}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Defaults exist in ",(0,s.jsx)(n.code,{children:"LlmEnforcer"})," and can be overridden per environment."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Redis budget holds (dev/test stub in BFF, enterprise Redis in prod):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Env: ",(0,s.jsx)(n.code,{children:"REDIS_URL"})," (enterprise path), keys ",(0,s.jsx)(n.code,{children:"bff:budget:{subject}"}),", ",(0,s.jsx)(n.code,{children:"bff:hold:{id}"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Holds settle on response (usage if available, else estimate)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Receipts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Env: ",(0,s.jsx)(n.code,{children:"RECEIPT_VAULT_URL"})," (optional in dev)."]}),"\n",(0,s.jsx)(n.li,{children:"Emit per call with policy snapshot, usage, and hash-chain continuity."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Headers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Response: ",(0,s.jsx)(n.code,{children:"x-aria-decision-id"})," (from PDP), ",(0,s.jsx)(n.code,{children:"x-aria-model-selected"}),", ",(0,s.jsx)(n.code,{children:"x-aria-model-rerouted"})," (true|false)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"code-entry-points",children:"Code entry points"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Endpoint: ",(0,s.jsx)(n.code,{children:"ms_bff/src/api/v1/endpoints/llm.py"})," (",(0,s.jsx)(n.code,{children:"/chat/completions"}),").","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"PDP evaluate, preflight, model fallback on deny, egress pin, budget hold/settle, receipts."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Enforcement: ",(0,s.jsx)(n.code,{children:"ms_bff/src/services/llm_enforcement.py"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Model allow check, prompt guard, masking, token caps, cost estimate."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Budget: ",(0,s.jsx)(n.code,{children:"ms_bff/src/services/llm_budget.py"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hold/settle/release (enterprise Redis in prod)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Receipts: ",(0,s.jsx)(n.code,{children:"ms_bff/src/services/llm_receipts.py"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"JWS sign (when configured), hash chain continuity in Redis."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"algorithm-details-v1",children:"Algorithm details (v1)"}),"\n",(0,s.jsxs)(n.p,{children:["Given request ",(0,s.jsx)(n.code,{children:"model=M0"}),", messages, and optional ",(0,s.jsx)(n.code,{children:"max_tokens"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Evaluate PDP with ",(0,s.jsx)(n.code,{children:"{provider=openai, model=M0, estimated_cents}"})," \u2192 if allow proceed."]}),"\n",(0,s.jsxs)(n.li,{children:["If deny with reason budget/policy:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Build candidates ",(0,s.jsx)(n.code,{children:"C = (constraints.model.allow \u2229 known_pricing_models)"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Sort ",(0,s.jsx)(n.code,{children:"C"})," by ",(0,s.jsx)(n.code,{children:"estimate_cents(candidate)"})," ascending."]}),"\n",(0,s.jsxs)(n.li,{children:["For each ",(0,s.jsx)(n.code,{children:"m \u2208 C"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Evaluate PDP with ",(0,s.jsx)(n.code,{children:"{provider=openai, model=m, estimated_cents}"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["If allow: re-run preflight with ",(0,s.jsx)(n.code,{children:"m"}),"; re-check egress; attempt budget hold; proceed."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"If none allow: return 402 (budget, BFF) or 403 (policy) as appropriate."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"test-coverage",children:"Test coverage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Endpoint tests: allow path, egress deny, budget 402, streaming path, model reroute with headers (",(0,s.jsx)(n.code,{children:"src/tests/api/endpoints/test_llm_endpoint.py"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Service test: budget-hold fallback selects cheaper model with in-test Redis/receipt patches (",(0,s.jsx)(n.code,{children:"src/tests/services/test_llm_budget_receipts.py"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ops-notes",children:"Ops notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Default behavior is transparent rerouting. If you want strict failure on disallowed/expensive models, add a feature flag (future) or simplify policies so only one model is allowed."}),"\n",(0,s.jsxs)(n.li,{children:["Observability: add metrics ",(0,s.jsx)(n.code,{children:"bff_llm_model_downgrades_total{reason}"})," and continue existing budget/receipt counters."]}),"\n",(0,s.jsxs)(n.li,{children:["Security: routing never widens egress or models beyond PDP ",(0,s.jsx)(n.code,{children:"constraints.model.allow"})," and ",(0,s.jsx)(n.code,{children:"constraints.egress.allow"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"roadmap-v2",children:"Roadmap (v2)"}),"\n",(0,s.jsx)(n.p,{children:"Provider switching (OpenAI \u21c4 Anthropic \u21c4 Ollama):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Expand PDP context to include ",(0,s.jsx)(n.code,{children:"{provider, model}"})," candidates and use PDP Search to shortlist authorized provider/model pairs."]}),"\n",(0,s.jsx)(n.li,{children:"Add provider-native clients and routing preferences (e.g., family, region, compliance tier)."}),"\n",(0,s.jsx)(n.li,{children:"BudgetState evaluation per provider/model pool; pick cheapest that passes."}),"\n",(0,s.jsx)(n.li,{children:"Pre-warm and cache PDP Search results (short TTL) to reduce latency."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Dynamic factors:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Geolocation, time-of-day, category/provider/model-specific budgets (already covered by PDP v1.x design)."}),"\n",(0,s.jsxs)(n.li,{children:["Admin policy knobs to express preferred order (e.g., ",(0,s.jsx)(n.code,{children:"model.prefer"}),") or soft caps by tenant/team."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"tldr",children:"TL;DR"}),"\n",(0,s.jsx)(n.p,{children:"Dynamic Model Routing v1 makes the BFF resilient and cost-aware without changing PDP or DSL. It uses the existing model allowlists, egress pins, token caps, and the BudgetState PIP to pick a compliant, affordable model automatically. v2 will extend this to provider switching with the same guardrails."}),"\n",(0,s.jsx)(n.h3,{id:"mermaid-v1-request-flow-sequence",children:"Mermaid: v1 request flow (sequence)"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\r\n  autonumber\r\n  participant C as Client (UI/Bot)\r\n  participant B as BFF\r\n  participant P as PDP\r\n  participant O as OpenAI\r\n  participant R as Receipt Vault\r\n\r\n  C->>B: POST /chat/completions {model, messages, max_tokens?}\r\n  B->>P: evaluate(subject, action, resource{model}, context{estimated_cents})\r\n  P--\x3e>B: decision + context.constraints (+ spend_snapshot?)\r\n  alt denied (policy/budget)\r\n    B->>B: build candidates (constraints.model.allow \u2229 known)\r\n    loop candidates (sorted by estimated cost)\r\n      B->>P: evaluate(..., resource{candidate}, context{estimated_cents})\r\n      alt allow\r\n        B->>B: select candidate, preflight, egress pin\r\n        note right of B: exit loop\r\n      else deny\r\n        B->>B: try next candidate\r\n      end\r\n    end\r\n    alt none allow\r\n      B--\x3e>C: 402/403\r\n      note right of C: end flow\r\n    end\r\n  else allowed\r\n    B->>B: preflight, egress pin\r\n  end\r\n  B->>B: budget HOLD (estimate)\r\n  alt stream\r\n    B->>O: start stream\r\n    O--\x3e>B: chunks\r\n    B--\x3e>C: re-stream + live guards\r\n  else non-stream\r\n    B->>O: POST chat\r\n    O--\x3e>B: JSON + usage\r\n    B--\x3e>C: JSON\r\n  end\r\n  B->>B: SETTLE (usage or estimate)\r\n  B->>R: emit receipt (policy snapshot, usage)"}),"\n",(0,s.jsx)(n.h3,{id:"mermaid-v1-routing-decision-flowchart",children:"Mermaid: v1 routing decision (flowchart)"}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart TD\r\n  A[Request with model M0] --\x3e B{PDP allow M0?}\r\n  B -- Yes --\x3e C[Preflight M0 + Egress OK]\r\n  B -- No --\x3e D{Reason budget/policy?}\r\n  D -- No --\x3e Z[403 Policy Denied]\r\n  D -- Yes --\x3e E[Candidates = allow \u2229 known]\r\n  E --\x3e F[Sort by estimated_cents]\r\n  F --\x3e G{For each candidate}\r\n  G --\x3e|PDP allow| H[Select candidate; Preflight + Egress]\r\n  G --\x3e|deny| F\r\n  H --\x3e I[Budget HOLD]\r\n  I --\x3e J{HOLD ok?}\r\n  J -- Yes --\x3e K[Call Provider]\r\n  J -- No --\x3e F\r\n  K --\x3e L[SETTLE + Receipt]\r\n  Z --\x3e X[Return 403]"}),"\n",(0,s.jsx)(n.h3,{id:"mermaid-v2-concept-provider-switching",children:"Mermaid: v2 concept (provider switching)"}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart LR\r\n  C[Client] --\x3e B[BFF]\r\n  B --\x3e P[PDP Search: list authorized provider/model]\r\n  P --\x3e B\r\n  B --\x3e R1[Rank: price, region, policy hints]\r\n  R1 --\x3e E1{PDP evaluate + BudgetState}\r\n  E1 --\x3e|allow| S1[Select provider+model]\r\n  E1 --\x3e|deny| R1\r\n  S1 --\x3e Egress[Pin egress to provider host]\r\n  Egress --\x3e Provider[(OpenAI/Anthropic/Ollama)]\r\n  Provider --\x3e B\r\n  B --\x3e RV[Receipt Vault]"})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);