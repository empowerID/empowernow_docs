"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[9827],{4684:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"services/crud-service/secrets/authorization-model-authzen","title":"Secrets authorization model (OpenID AuthZ\u2011style PDP)","description":"Challenges, concepts, configuration, protections, and auditing for our secrets authorization model","source":"@site/docs/services/crud-service/secrets/11-authorization-model-authzen.md","sourceDirName":"services/crud-service/secrets","slug":"/services/crud-service/secrets/authorization-model-authzen","permalink":"/empowernow_docs/docs/services/crud-service/secrets/authorization-model-authzen","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/crud-service/secrets/11-authorization-model-authzen.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"Secrets authorization model (OpenID AuthZ\u2011style PDP)","description":"Challenges, concepts, configuration, protections, and auditing for our secrets authorization model"},"sidebar":"tutorialSidebar","previous":{"title":"Troubleshooting and runbooks","permalink":"/empowernow_docs/docs/services/crud-service/secrets/troubleshooting-runbooks"},"next":{"title":"Auditing and logging","permalink":"/empowernow_docs/docs/services/crud-service/secrets/auditing-logging"}}');var i=s(74848),t=s(28453);const c={title:"Secrets authorization model (OpenID AuthZ\u2011style PDP)",description:"Challenges, concepts, configuration, protections, and auditing for our secrets authorization model"},d=void 0,o={},l=[{value:"Why a PDP for secrets",id:"why-a-pdp-for-secrets",level:2},{value:"What \u201cAuthZ\u2011style PDP\u201d means here",id:"what-authzstyle-pdp-means-here",level:2},{value:"What is protected (purposes)",id:"what-is-protected-purposes",level:2},{value:"How it\u2019s configured",id:"how-its-configured",level:2},{value:"Binding and obligations",id:"binding-and-obligations",level:2},{value:"Auditing and logging",id:"auditing-and-logging",level:2},{value:"Failure modes (examples)",id:"failure-modes-examples",level:2},{value:"Where to look next",id:"where-to-look-next",level:2},{value:"PEP enforcement flow (at a glance)",id:"pep-enforcement-flow-at-a-glance",level:2},{value:"Grant lifecycle (conceptual)",id:"grant-lifecycle-conceptual",level:2}];function a(e){const n={code:"code",h2:"h2",hr:"hr",li:"li",mermaid:"mermaid",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"why-a-pdp-for-secrets",children:"Why a PDP for secrets"}),"\n",(0,i.jsx)(n.p,{children:"Challenges addressed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Provider tokens alone don\u2019t express business policy (\u201cwho may use what, for what purpose, when\u201d)."}),"\n",(0,i.jsx)(n.li,{children:"Each provider behaves differently; policy must be consistent across providers."}),"\n",(0,i.jsx)(n.li,{children:"Minimizing blast radius requires short\u2011lived, purpose\u2011bound usage and binding to the caller."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Our approach:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Canonical Secret URIs identify resources uniformly across providers and tenants."}),"\n",(0,i.jsxs)(n.li,{children:["A Policy Enforcement Point (PEP) in ",(0,i.jsx)(n.code,{children:"VaultService"})," and the Secrets API calls a Policy Decision Point (PDP) client (",(0,i.jsx)(n.code,{children:"SecretPolicyService"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Decisions include obligations (e.g., TTL, max uses) that the PEP enforces before any provider access."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"what-authzstyle-pdp-means-here",children:"What \u201cAuthZ\u2011style PDP\u201d means here"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The PEP sends subject, tenant, resource (canonical URI), and a purpose (e.g., ",(0,i.jsx)(n.code,{children:"read"}),", ",(0,i.jsx)(n.code,{children:"write"}),", ",(0,i.jsx)(n.code,{children:"delete"}),", ",(0,i.jsx)(n.code,{children:"undelete"}),", ",(0,i.jsx)(n.code,{children:"destroy_versions"}),", ",(0,i.jsx)(n.code,{children:"rotate"}),", ",(0,i.jsx)(n.code,{children:"read_metadata"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"The PDP returns allow/deny and optional obligations (like TTL/max\u2011uses). The PEP enforces the decision at the point of use."}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\r\n  participant Caller\r\n  participant PEP as VaultService / Secrets API (PEP)\r\n  participant PDP as SecretPolicyService (PDP)\r\n  participant Provider as Provider (KVv2/YAML)\r\n  Caller->>PEP: get_credentials(uri)/API request\r\n  PEP->>PDP: authorize(subject, tenant, resource, purpose)\r\n  alt Permit\r\n    PDP--\x3e>PEP: effect=Permit + obligations (ttl, max_uses)\r\n    PEP->>PEP: enforce obligations & binding checks\r\n    PEP->>Provider: provider op\r\n    Provider--\x3e>PEP: value/metadata\r\n    PEP--\x3e>Caller: 200 result\r\n    PEP--\x3e>PEP: emit audit + metrics\r\n  else Deny\r\n    PDP--\x3e>PEP: effect=Deny (+ reason)\r\n    PEP--\x3e>Caller: 403 with structured details\r\n    PEP--\x3e>PEP: emit audit + metrics\r\n  end"}),"\n",(0,i.jsx)(n.h2,{id:"what-is-protected-purposes",children:"What is protected (purposes)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Read via SDK (",(0,i.jsx)(n.code,{children:"VaultService.get_credentials"}),") is protected by the PEP (enforces PDP decision internally)."]}),"\n",(0,i.jsxs)(n.li,{children:["Management endpoints purpose\u2011map:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["POST ",(0,i.jsx)(n.code,{children:"/api/secrets"})," \u2192 ",(0,i.jsx)(n.code,{children:"write"})]}),"\n",(0,i.jsxs)(n.li,{children:["DELETE ",(0,i.jsx)(n.code,{children:"/api/secrets"})," \u2192 ",(0,i.jsx)(n.code,{children:"delete"})," (or ",(0,i.jsx)(n.code,{children:"destroy_versions"})," when ",(0,i.jsx)(n.code,{children:"destroy=true"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["POST ",(0,i.jsx)(n.code,{children:"/api/secrets/rotate"})," \u2192 ",(0,i.jsx)(n.code,{children:"rotate"})]}),"\n",(0,i.jsxs)(n.li,{children:["GET ",(0,i.jsx)(n.code,{children:"/api/secrets/metadata"}),", ",(0,i.jsx)(n.code,{children:"/keys"})," \u2192 ",(0,i.jsx)(n.code,{children:"read_metadata"})]}),"\n",(0,i.jsxs)(n.li,{children:["GET ",(0,i.jsx)(n.code,{children:"/api/secrets/metadata/detail"}),", ",(0,i.jsx)(n.code,{children:"/versions"})," \u2192 ",(0,i.jsx)(n.code,{children:"read_metadata"})]}),"\n",(0,i.jsxs)(n.li,{children:["POST ",(0,i.jsx)(n.code,{children:"/api/secrets/undelete"})," \u2192 ",(0,i.jsx)(n.code,{children:"undelete"})]}),"\n",(0,i.jsxs)(n.li,{children:["POST ",(0,i.jsx)(n.code,{children:"/api/secrets/destroy-versions"})," \u2192 ",(0,i.jsx)(n.code,{children:"destroy_versions"})]}),"\n",(0,i.jsxs)(n.li,{children:["POST ",(0,i.jsx)(n.code,{children:"/api/secrets/bulk"})," \u2192 per\u2011operation mapping as above"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Tenant and mount guards:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TENANT_ID"})," and ",(0,i.jsx)(n.code,{children:"TENANT_ALLOWED_MOUNTS"})," constrain canonical URIs to allowed mounts per tenant prior to PDP."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Optional scope/audience enforcement:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SECRETS_ENFORCE_SCOPES=true"})," enforces endpoint scopes (e.g., ",(0,i.jsx)(n.code,{children:"secrets.read"}),", ",(0,i.jsx)(n.code,{children:"secrets.write"}),", ",(0,i.jsx)(n.code,{children:"secrets.delete"}),", ",(0,i.jsx)(n.code,{children:"secrets.destroy"}),", ",(0,i.jsx)(n.code,{children:"secrets.rotate"}),", ",(0,i.jsx)(n.code,{children:"secrets.read_metadata"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SECRETS_API_REQUIRE_AUTH=true"})," requires auth for ",(0,i.jsx)(n.code,{children:"/api/secrets/*"})," endpoints."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SECRETS_AUDIENCE"})," can be used for audience checks where applicable."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-its-configured",children:"How it\u2019s configured"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Enable authorization: ",(0,i.jsx)(n.code,{children:"ENABLE_AUTHORIZATION=true"})," so PEP calls PDP."]}),"\n",(0,i.jsxs)(n.li,{children:["Guard URIs: ",(0,i.jsx)(n.code,{children:"TENANT_ID"}),", ",(0,i.jsx)(n.code,{children:"TENANT_ALLOWED_MOUNTS"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Toggle scopes: ",(0,i.jsx)(n.code,{children:"SECRETS_ENFORCE_SCOPES"})," (optional) and endpoint auth: ",(0,i.jsx)(n.code,{children:"SECRETS_API_REQUIRE_AUTH"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Providers:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["KVv2: ",(0,i.jsx)(n.code,{children:"VAULT_URL"}),", ",(0,i.jsx)(n.code,{children:"VAULT_TOKEN"})," (or AppRole), mount policies."]}),"\n",(0,i.jsxs)(n.li,{children:["YAML (dev only): ",(0,i.jsx)(n.code,{children:"YAML_VAULT_PATH"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Passing subject/tenant/context:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The PEP includes subject and tenant (from request state) when calling the PDP client (",(0,i.jsx)(n.code,{children:"SecretPolicyService.authorize_batch(...)"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["From FastAPI/Starlette, ",(0,i.jsx)(n.code,{children:"ExecutionContext(request)"})," propagates request context; correlation IDs and traces flow with it."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"binding-and-obligations",children:"Binding and obligations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Obligations (e.g., TTL, max_uses) are returned from the PDP and enforced by the PEP."}),"\n",(0,i.jsx)(n.li,{children:"Binding checks are performed by the PEP when applicable (e.g., audience checks). Where DPoP/mTLS are available, they\u2019re preferred; otherwise standard audience/scope checks apply."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"auditing-and-logging",children:"Auditing and logging"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Kafka events are emitted for read/update/delete and related actions. When ",(0,i.jsx)(n.code,{children:"TENANT_SALT"})," is set, a non\u2011leaky ",(0,i.jsx)(n.code,{children:"resource_ref = HMAC(tenant_salt, canonical_uri)"})," is included."]}),"\n",(0,i.jsx)(n.li,{children:"Events include correlation identifiers for traceability; OpenTelemetry spans link PEP \u2192 PDP \u2192 provider calls when tracing is enabled."}),"\n",(0,i.jsxs)(n.li,{children:["Logs redact secret values. YAML dev adds SSE ",(0,i.jsx)(n.code,{children:"/events"})," and ",(0,i.jsx)(n.code,{children:"/audit"})," in\u2011memory buffers for local diagnostics."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"failure-modes-examples",children:"Failure modes (examples)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PDP denial \u2192 the PEP returns 403 with structured details for API calls; SDK calls fail prior to provider access."}),"\n",(0,i.jsx)(n.li,{children:"Guard failure (tenant/mount) \u2192 400 with a structured error code/message."}),"\n",(0,i.jsx)(n.li,{children:"Unsupported provider operation \u2192 501."}),"\n",(0,i.jsx)(n.li,{children:"Provider error \u2192 502 from API; SDK raises accordingly."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"where-to-look-next",children:"Where to look next"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Canonical URIs and policy model: ",(0,i.jsx)(n.code,{children:"./03-canonical-uris-and-policy.md"})]}),"\n",(0,i.jsxs)(n.li,{children:["Security model details: ",(0,i.jsx)(n.code,{children:"./05-security-model.md"})]}),"\n",(0,i.jsxs)(n.li,{children:["API reference and scopes/purposes: ",(0,i.jsx)(n.code,{children:"../reference/secrets-api.md"})]}),"\n",(0,i.jsxs)(n.li,{children:["PDP enrichment details (exact fields sent to PDP): ",(0,i.jsx)(n.code,{children:"./SECRETS_PDP_ENRICHMENT.md"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"pep-enforcement-flow-at-a-glance",children:"PEP enforcement flow (at a glance)"}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart TD\r\n  A["Request with canonical URI"] --\x3e B{"Tenant/mount guard"}\r\n  B -- "fail" --\x3e E1["400 Bad Request"]\r\n  B -- "ok" --\x3e C["Authorize with PDP (subject, tenant, resource, purpose)"]\r\n  C --\x3e D{"Decision"}\r\n  D -- "Deny" --\x3e E2["403 Forbidden"]\r\n  D -- "Permit" --\x3e F["Enforce obligations (ttl, max_uses) and binding"]\r\n  F --\x3e G["Call provider"]\r\n  G --\x3e H["Return value/metadata"]\r\n  H --\x3e I["Emit audit + metrics"]\r\n  I --\x3e J["200 Response"]'}),"\n",(0,i.jsx)(n.h2,{id:"grant-lifecycle-conceptual",children:"Grant lifecycle (conceptual)"}),"\n",(0,i.jsx)(n.mermaid,{value:"stateDiagram-v2\r\n  [*] --\x3e Issued: PDP Permit with obligations\r\n  Issued --\x3e InUse: first successful use\r\n  InUse --\x3e Expired: ttl elapsed\r\n  InUse --\x3e MaxUsed: max_uses reached\r\n  Issued --\x3e Revoked: policy revoke (next authorization will Deny)\r\n  Expired --\x3e [*]\r\n  MaxUsed --\x3e [*]\r\n  Revoked --\x3e [*]"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var r=s(96540);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);