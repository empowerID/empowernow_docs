"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[3163],{28453:(r,e,n)=>{n.d(e,{R:()=>o,x:()=>i});var s=n(96540);const a={},t=s.createContext(a);function o(r){const e=s.useContext(t);return s.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function i(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(a):r.components||a:o(r.components),s.createElement(t.Provider,{value:e},r.children)}},89025:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"services/crud-service/secrets/automation-execute-workflows-agents","title":"Automation, /execute workflows, and AI agents","description":"How to invoke the Secrets API from automation, CRUD /execute workflows, graph flows, and AI agents","source":"@site/docs/services/crud-service/secrets/13-automation-execute-workflows-agents.md","sourceDirName":"services/crud-service/secrets","slug":"/services/crud-service/secrets/automation-execute-workflows-agents","permalink":"/empowernow_docs/docs/services/crud-service/secrets/automation-execute-workflows-agents","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/crud-service/secrets/13-automation-execute-workflows-agents.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"title":"Automation, /execute workflows, and AI agents","description":"How to invoke the Secrets API from automation, CRUD /execute workflows, graph flows, and AI agents"},"sidebar":"tutorialSidebar","previous":{"title":"Auditing and logging","permalink":"/empowernow_docs/docs/services/crud-service/secrets/auditing-logging"},"next":{"title":"Secrets rotation \u2014 background and end\u2011to\u2011end flow","permalink":"/empowernow_docs/docs/services/crud-service/secrets/rotation"}}');var a=n(74848),t=n(28453);const o={title:"Automation, /execute workflows, and AI agents",description:"How to invoke the Secrets API from automation, CRUD /execute workflows, graph flows, and AI agents"},i=void 0,c={},d=[{value:"Overview",id:"overview",level:2},{value:"Use from CRUD Service workflows (/execute)",id:"use-from-crud-service-workflows-execute",level:2},{value:"Secrets API connection descriptor (example)",id:"secrets-api-connection-descriptor-example",level:2},{value:"Graph workflows and AI agents",id:"graph-workflows-and-ai-agents",level:2},{value:"Auditing and observability",id:"auditing-and-observability",level:2}];function p(r){const e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...r.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(e.p,{children:["The Secrets Platform is callable over HTTP. This page shows how to wire the Secrets API for use in automation, CRUD Service ",(0,a.jsx)(e.code,{children:"/execute"})," workflows, graph workflows, and AI agents. It reuses the same Canonical URIs and PDP enforcement as described elsewhere in this section."]}),"\n",(0,a.jsx)(e.h2,{id:"use-from-crud-service-workflows-execute",children:"Use from CRUD Service workflows (/execute)"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Workflows and automation that can make HTTP requests to the CRUD Service can call the Secrets API endpoints directly."}),"\n",(0,a.jsx)(e.li,{children:"PDP enforcement occurs in the PEP (VaultService/Secrets API) before any provider access."}),"\n",(0,a.jsxs)(e.li,{children:["Enable or require auth on endpoints with deployment flags (see Security integration page):","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"SECRETS_API_REQUIRE_AUTH"})," to require auth"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"SECRETS_ENFORCE_SCOPES"})," to enforce OAuth scopes"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"secrets-api-connection-descriptor-example",children:"Secrets API connection descriptor (example)"}),"\n",(0,a.jsxs)(e.p,{children:["The following connection maps common operations to the Secrets API. Adjust ",(0,a.jsx)(e.code,{children:"base_url"})," and auth headers per environment."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'name: "secrets"\r\ntype: "secrets_api"\r\n\r\nconnection:\r\n  base_url: "{{ \'CRUD_INTERNAL_BASE_URL\' | ENV or \'http://127.0.0.1:8000\' }}"\r\n  auth_type: "none"\r\n  default_content_type: "application/json"\r\n\r\nobject_types:\r\n  secret:\r\n    schema_mapping: "secrets_passthrough"\r\n    commands:\r\n      value:\r\n        method: "GET"\r\n        endpoint: "/api/secrets/value"\r\n        required_params: ["uri"]\r\n        params:\r\n          uri: "{{ params.uri }}"\r\n          version: "{{ params.version }}"\r\n        skip_schema_transform: true\r\n      create_or_update:\r\n        method: "POST"\r\n        endpoint: "/api/secrets"\r\n        required_params: ["uri", "value"]\r\n        headers:\r\n          Authorization: "Bearer {{ \'INTERNAL_EXECUTION_TOKEN\' | ENV or \'internal\' }}"\r\n        body:\r\n          uri: "{{ params.uri }}"\r\n          value: "{{ params.value }}"\r\n        skip_schema_transform: true\r\n      read:\r\n        method: "GET"\r\n        endpoint: "/api/secrets"\r\n        required_params: ["uri"]\r\n        params:\r\n          uri: "{{ params.uri }}"\r\n        skip_schema_transform: true\r\n      delete:\r\n        method: "DELETE"\r\n        endpoint: "/api/secrets"\r\n        required_params: ["uri"]\r\n        headers:\r\n          Authorization: "Bearer {{ \'INTERNAL_EXECUTION_TOKEN\' | ENV or \'internal\' }}"\r\n        params:\r\n          uri: "{{ params.uri }}"\r\n          destroy: "false"\r\n        skip_schema_transform: true\r\n      destroy:\r\n        method: "DELETE"\r\n        endpoint: "/api/secrets"\r\n        required_params: ["uri"]\r\n        headers:\r\n          Authorization: "Bearer {{ \'INTERNAL_EXECUTION_TOKEN\' | ENV or \'internal\' }}"\r\n        params:\r\n          uri: "{{ params.uri }}"\r\n          destroy: "true"\r\n        skip_schema_transform: true\r\n      rotate:\r\n        method: "POST"\r\n        endpoint: "/api/secrets/rotate"\r\n        required_params: ["uri", "value"]\r\n        headers:\r\n          Authorization: "Bearer {{ \'INTERNAL_EXECUTION_TOKEN\' | ENV or \'internal\' }}"\r\n        body:\r\n          uri: "{{ params.uri }}"\r\n          value: "{{ params.value }}"\r\n        skip_schema_transform: true\r\n      bulk:\r\n        method: "POST"\r\n        endpoint: "/api/secrets/bulk"\r\n        required_params: ["operations"]\r\n        headers:\r\n          Authorization: "Bearer {{ \'INTERNAL_EXECUTION_TOKEN\' | ENV or \'internal\' }}"\r\n        body:\r\n          operations: "{{ params.operations }}"\r\n          continueOnError: "{{ params.continueOnError or true }}"\r\n        skip_schema_transform: true\r\n      copy:\r\n        method: "POST"\r\n        endpoint: "/api/secrets/copy"\r\n        required_params: ["fromUri", "toUri"]\r\n        headers:\r\n          Authorization: "Bearer {{ \'INTERNAL_EXECUTION_TOKEN\' | ENV or \'internal\' }}"\r\n        body:\r\n          fromUri: "{{ params.fromUri }}"\r\n          toUri: "{{ params.toUri }}"\r\n          overwrite: "{{ params.overwrite or false }}"\r\n        skip_schema_transform: true\r\n      move:\r\n        method: "POST"\r\n        endpoint: "/api/secrets/move"\r\n        required_params: ["fromUri", "toUri"]\r\n        headers:\r\n          Authorization: "Bearer {{ \'INTERNAL_EXECUTION_TOKEN\' | ENV or \'internal\' }}"\r\n        body:\r\n          fromUri: "{{ params.fromUri }}"\r\n          toUri: "{{ params.toUri }}"\r\n          overwrite: "{{ params.overwrite or false }}"\r\n        skip_schema_transform: true\r\n      undelete:\r\n        method: "POST"\r\n        endpoint: "/api/secrets/undelete"\r\n        required_params: ["uri", "versions"]\r\n        headers:\r\n          Authorization: "Bearer {{ \'INTERNAL_EXECUTION_TOKEN\' | ENV or \'internal\' }}"\r\n        body:\r\n          uri: "{{ params.uri }}"\r\n          versions: "{{ params.versions }}"\r\n        skip_schema_transform: true\r\n      destroy_versions:\r\n        method: "POST"\r\n        endpoint: "/api/secrets/destroy-versions"\r\n        required_params: ["uri", "versions"]\r\n        headers:\r\n          Authorization: "Bearer {{ \'INTERNAL_EXECUTION_TOKEN\' | ENV or \'internal\' }}"\r\n        body:\r\n          uri: "{{ params.uri }}"\r\n          versions: "{{ params.versions }}"\r\n        skip_schema_transform: true\r\n\r\n  catalog:\r\n    schema_mapping: "secrets_passthrough"\r\n    commands:\r\n      metadata:\r\n        method: "GET"\r\n        endpoint: "/api/secrets/metadata"\r\n        required_params: ["prefix"]\r\n        params:\r\n          prefix: "{{ params.prefix }}"\r\n          offset: "{{ params.offset or 0 }}"\r\n          limit: "{{ params.limit or 100 }}"\r\n        skip_schema_transform: true\r\n      metadata_detail:\r\n        method: "GET"\r\n        endpoint: "/api/secrets/metadata/detail"\r\n        required_params: ["uri"]\r\n        params:\r\n          uri: "{{ params.uri }}"\r\n        skip_schema_transform: true\r\n      versions:\r\n        method: "GET"\r\n        endpoint: "/api/secrets/versions"\r\n        required_params: ["uri"]\r\n        params:\r\n          uri: "{{ params.uri }}"\r\n        skip_schema_transform: true\r\n      keys:\r\n        method: "GET"\r\n        endpoint: "/api/secrets/keys"\r\n        required_params: ["uri"]\r\n        params:\r\n          uri: "{{ params.uri }}"\r\n        skip_schema_transform: true\r\n      search:\r\n        method: "GET"\r\n        endpoint: "/api/secrets/search"\r\n        required_params: ["q"]\r\n        params:\r\n          q: "{{ params.q }}"\r\n          prefix: "{{ params.prefix }}"\r\n          offset: "{{ params.offset or 0 }}"\r\n          limit: "{{ params.limit or 100 }}"\r\n        skip_schema_transform: true\n'})}),"\n",(0,a.jsx)(e.p,{children:"Notes"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Use Canonical URIs in parameters and payloads (e.g., ",(0,a.jsx)(e.code,{children:"openbao+kv2://secret/app#token"}),")."]}),"\n",(0,a.jsxs)(e.li,{children:["When ",(0,a.jsx)(e.code,{children:"SECRETS_API_REQUIRE_AUTH=true"}),", include appropriate Authorization headers per your deployment."]}),"\n",(0,a.jsx)(e.li,{children:"For YAML provider, reads/writes apply to the dev file only and are guarded by environment flags."}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"graph-workflows-and-ai-agents",children:"Graph workflows and AI agents"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Graph workflows and agents can call the same endpoints with Canonical URIs for read, rotate, and catalog operations."}),"\n",(0,a.jsxs)(e.li,{children:["Prefer ",(0,a.jsx)(e.code,{children:"/api/secrets/value"})," for provider\u2011backed reads (supports KVv2 version pin via ",(0,a.jsx)(e.code,{children:"version="}),")."]}),"\n",(0,a.jsx)(e.li,{children:"Use bulk operations for maintenance windows and catalog endpoints for discovery."}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"auditing-and-observability",children:"Auditing and observability"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["All operations emit Kafka events (see Auditing & logging page) with non\u2011leaky ",(0,a.jsx)(e.code,{children:"resource_ref"})," when configured."]}),"\n",(0,a.jsx)(e.li,{children:"Use correlation IDs and traces to stitch workflow steps end\u2011to\u2011end."}),"\n"]})]})}function u(r={}){const{wrapper:e}={...(0,t.R)(),...r.components};return e?(0,a.jsx)(e,{...r,children:(0,a.jsx)(p,{...r})}):p(r)}}}]);