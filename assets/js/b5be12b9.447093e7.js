"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[2917],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(96540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},80570:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"services/idp/how-to/azure-entra-federation","title":"Federation \u2013 IdP \u2194 Microsoft Entra ID (Azure AD)","description":"Configure and operate Azure Entra (Azure AD) federation with our IdP \u2013 configuration, flows, JWKS validation, token exchange (RFC 8693), PDP integration, policies, and security.","source":"@site/docs/services/idp/how-to/azure-entra-federation.md","sourceDirName":"services/idp/how-to","slug":"/services/idp/how-to/azure-entra-federation","permalink":"/empowernow_docs/docs/services/idp/how-to/azure-entra-federation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/idp/how-to/azure-entra-federation.md","tags":[],"version":"current","frontMatter":{"title":"Federation \u2013 IdP \u2194 Microsoft Entra ID (Azure AD)","sidebar_label":"Azure Entra Federation","description":"Configure and operate Azure Entra (Azure AD) federation with our IdP \u2013 configuration, flows, JWKS validation, token exchange (RFC 8693), PDP integration, policies, and security."},"sidebar":"tutorialSidebar","previous":{"title":"Identity Provider (IdP)","permalink":"/empowernow_docs/docs/services/idp/"},"next":{"title":"Mint IAT and DCR","permalink":"/empowernow_docs/docs/services/idp/how-to/mint-iat-and-dcr"}}');var t=i(74848),s=i(28453);const o={title:"Federation \u2013 IdP \u2194 Microsoft Entra ID (Azure AD)",sidebar_label:"Azure Entra Federation",description:"Configure and operate Azure Entra (Azure AD) federation with our IdP \u2013 configuration, flows, JWKS validation, token exchange (RFC 8693), PDP integration, policies, and security."},a=void 0,c={},d=[{value:"Summary",id:"summary",level:2},{value:"Validating Entra tokens (JWKS\u2011first)",id:"validating-entra-tokens-jwksfirst",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Federation configuration (example)",id:"federation-configuration-example",level:2},{value:"Authentication flow",id:"authentication-flow",level:2},{value:"Token exchange (RFC 8693)",id:"token-exchange-rfc-8693",level:2},{value:"PDP authorization",id:"pdp-authorization",level:2},{value:"Policies (example)",id:"policies-example",level:2},{value:"Security considerations",id:"security-considerations",level:2},{value:"Health checklist",id:"health-checklist",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.p,{children:["Our IdP federates with Microsoft Entra ID (Azure AD) using OpenID Connect. The BFF initiates login at the IdP; the IdP page redirects the browser to Azure ",(0,t.jsx)(n.code,{children:"/authorize"}),", then the IdP exchanges the code for tokens, validates with JWKS, maps claims, and mints a local identity. Tokens never reach the browser (BFF pattern)."]}),"\n",(0,t.jsx)(n.p,{children:"Highlights:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Protocol: OIDC authorization code + PKCE"}),"\n",(0,t.jsx)(n.li,{children:"Validation: JWKS signature verification (no RFC 7662 introspection for Azure)"}),"\n",(0,t.jsxs)(n.li,{children:["Stable identity: Azure ",(0,t.jsx)(n.code,{children:"oid"})," is used as the stable identifier"]}),"\n",(0,t.jsxs)(n.li,{children:["Subject: IdP issues local tokens whose ",(0,t.jsx)(n.code,{children:"sub"})," is an ARN (provider\u2011namespaced, hashed tenant)"]}),"\n",(0,t.jsx)(n.li,{children:"PDP: SPA/BFF call OpenID AuthZEN endpoints for decisions after authentication"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"validating-entra-tokens-jwksfirst",children:"Validating Entra tokens (JWKS\u2011first)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Verify JWTs against Azure JWKS (e.g. ",(0,t.jsx)(n.code,{children:"https://login.microsoftonline.com/{tenant-id}/discovery/v2.0/keys"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Validate issuer (",(0,t.jsx)(n.code,{children:"iss"}),"), expiry (",(0,t.jsx)(n.code,{children:"exp"}),"), and audience via ",(0,t.jsx)(n.code,{children:"aud"})," or ",(0,t.jsx)(n.code,{children:"azp"})," (Azure modes)"]}),"\n",(0,t.jsx)(n.li,{children:"Skip introspection for Azure\u2011like issuers (not provided for user tokens)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Implementation notes (code pointers):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IdP/templates/login.html"})," \u2013 builds Azure authorize URL + state"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IdP/src/api/auth.py"})," \u2013 derives ",(0,t.jsx)(n.code,{children:"azure_authorize_url"})," and callback"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IdP/src/api/external_auth.py"})," \u2013 token exchange body and endpoint"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IdP/src/services/federation_service.py"})," \u2013 JWKS\u2011first, ",(0,t.jsx)(n.code,{children:"aud/azp"})," handling, ARN rewrite"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart LR\r\n  SPA[SPA] --\x3e BFF[BFF]\r\n  BFF --\x3e IdP[IdP]\r\n  IdP --\x3e|/authorize| Entra[Azure Entra ID]\r\n  Entra --\x3e|code| IdP\r\n  IdP --\x3e|token exchange| Entra\r\n  IdP --\x3e|local tokens| BFF\r\n  BFF --\x3e|session cookie| SPA\r\n  SPA --\x3e|/access/v1/*| BFF --\x3e PDP[PDP (AuthZEN)]"}),"\n",(0,t.jsx)(n.h2,{id:"federation-configuration-example",children:"Federation configuration (example)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"federation.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'federation:\r\n  enabled: true\r\n  default_token_lifetime: 3600\r\n  account_linking_enabled: true\r\n  auto_provision_users: false\r\n\r\n  require_secure_issuer: true\r\n  jwks_cache_ttl: 3600\r\n  log_federation_events: true\r\n  audit_token_exchanges: true\r\n\r\n  trusted_idps:\r\n    - name: "entra-id"\r\n      issuer: "https://login.microsoftonline.com/{tenantID}/v2.0"\r\n      audience: ["api://<client-id>", "<client-id>"]\r\n      jwks_url: "https://login.microsoftonline.com/{tenantID}/discovery/v2.0/keys"\r\n      client_id: "${ENTRA_CLIENT_ID}"\r\n      client_secret: "${ENTRA_CLIENT_SECRET}"\r\n      enable_token_exchange: true\r\n      tenant_id: "{tenantID}"\r\n      stable_id_claim: "oid"\r\n      max_token_age: 86400\r\n      require_verified_email: false\r\n      claims_mapping:\r\n        roles:\r\n          - { source: roles, format: array }\r\n          - { source: groups, format: array }\r\n        permissions:\r\n          - { source: scp, format: space_delimited }\r\n          - { source: permissions, format: array }\n'})}),"\n",(0,t.jsx)(n.p,{children:"Key elements:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"issuer"}),", ",(0,t.jsx)(n.code,{children:"jwks_url"}),": per\u2011tenant discovery"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"audience"}),": accept ",(0,t.jsx)(n.code,{children:"aud"})," or Azure ",(0,t.jsx)(n.code,{children:"azp"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stable_id_claim"}),": use ",(0,t.jsx)(n.code,{children:"oid"})," for durable identity mapping"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"enable_token_exchange"}),": allow RFC 8693 flows"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"authentication-flow",children:"Authentication flow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["SPA loads, no session \u2192 calls BFF ",(0,t.jsx)(n.code,{children:"/auth/login"})]}),"\n",(0,t.jsx)(n.li,{children:"BFF starts OIDC at IdP (PKCE + state)"}),"\n",(0,t.jsxs)(n.li,{children:["IdP login page offers Azure; browser goes to Azure ",(0,t.jsx)(n.code,{children:"/authorize"})]}),"\n",(0,t.jsxs)(n.li,{children:["Azure authenticates user \u2192 redirects code to IdP callback ",(0,t.jsx)(n.code,{children:"/api/auth/external/azure/callback"})]}),"\n",(0,t.jsxs)(n.li,{children:["IdP exchanges code for tokens at Azure ",(0,t.jsx)(n.code,{children:"/oauth2/v2.0/token"})]}),"\n",(0,t.jsxs)(n.li,{children:["IdP validates via JWKS, maps claims, mints local tokens (with ARN ",(0,t.jsx)(n.code,{children:"sub"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"BFF creates session cookie and redirects SPA"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Azure token exchange request (IdP \u2192 Azure):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:"POST https://login.microsoftonline.com/<TENANT_ID>/oauth2/v2.0/token\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\ngrant_type=authorization_code&client_id=<CLIENT_ID>&client_secret=<SECRET>&code=<AUTH_CODE>&redirect_uri=<IDP_BASE_URL>/api/auth/external/azure/callback&scope=openid%20profile%20email\n"})}),"\n",(0,t.jsx)(n.h2,{id:"token-exchange-rfc-8693",children:"Token exchange (RFC 8693)"}),"\n",(0,t.jsxs)(n.p,{children:["IdP supports ",(0,t.jsx)(n.code,{children:"grant_type=urn:ietf:params:oauth:grant-type:token-exchange"})," to convert external Azure tokens to local IdP tokens."]}),"\n",(0,t.jsx)(n.p,{children:"Example response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "access_token": "...",\r\n  "issued_token_type": "urn:ietf:params:oauth:token-type:jwt",\r\n  "token_type": "Bearer",\r\n  "expires_in": 3600,\r\n  "scope": "openid profile email api.write",\r\n  "refresh_token": "..."\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Final local token (example):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "iss": "https://idp.example.com",\r\n  "sub": "auth:v1:identity:entra-id-13ac97f8:ffe9b9f0-ec04-4b9c-bd48-30fdefd72a5e",\r\n  "aud": ["bff-client"],\r\n  "scope": "openid profile email api.write",\r\n  "email": "john.doe@company.com",\r\n  "idp": "entra-id",\r\n  "idp_sub": "ffe9b9f0-ec04-4b9c-bd48-30fdefd72a5e",\r\n  "roles": ["User", "Admin"],\r\n  "permissions": ["User.Read", "User.Write"]\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"pdp-authorization",children:"PDP authorization"}),"\n",(0,t.jsx)(n.p,{children:"After authentication, the SPA calls the BFF\u2019s AuthZEN endpoints for authorization. A typical decision request:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "subject": { "type": "user", "id": "auth:v1:identity:entra-id-13ac97f8:ffe9b9f0-ec04-4b9c-bd48-30fdefd72a5e" },\r\n  "action": { "name": "document.view" },\r\n  "resource": { "type": "document", "id": "doc-123" },\r\n  "context": {}\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Implementation note: In the Experience SPA we standardize the subject sent to the PDP as a canonical account ARN (",(0,t.jsx)(n.code,{children:'subject.type = "account"'}),", ",(0,t.jsx)(n.code,{children:'subject.id = "auth:account:{provider}:{user_id}"'}),"). If your policies use ",(0,t.jsx)(n.code,{children:"auth:v1:identity:*"})," identifiers from federated tokens, ensure your PDP normalization or policy subjects accommodate both shapes."]}),"\n",(0,t.jsxs)(n.p,{children:["See also: Experience \u2192 Authorization (AuthZEN) ",(0,t.jsx)(n.code,{children:"../../experience/authorization-authzen"})]}),"\n",(0,t.jsx)(n.h2,{id:"policies-example",children:"Policies (example)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"TestPolicy.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'id: TestPolicy\r\nname: Test Policy for Full Access\r\nschema_version: "2.0"\r\ntype: policy\r\npolicy_type: AuthZ\r\nenabled: true\r\nsubjects:\r\n  - { type: user, id: auth:v1:identity:entra-id-13ac97f8:ffe9b9f0-ec04-4b9c-bd48-30fdefd72a5e }\r\n  - { type: user, id: auth:account:oidc:john.doe@company.com }\r\nrules:\r\n  - description: Allow user to validate designer draft\r\n    resource: designer.draft_command\r\n    action: validate\r\n    effect: permit\n'})}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Token validation: JWKS signature, issuer/audience checks, expiry enforcement"}),"\n",(0,t.jsx)(n.li,{children:"Session security: server\u2011side session in Redis; HttpOnly/Secure/SameSite cookies; session binding (IP/UA hash)"}),"\n",(0,t.jsx)(n.li,{children:"Federation security: explicitly trusted issuers in config; claims transformation; audit token exchanges"}),"\n",(0,t.jsx)(n.li,{children:"Authorization security: least privilege policies; subject isolation via provider\u2011namespaced ARNs"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"health-checklist",children:"Health checklist"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"IdP JWKS cache warms successfully; federation logs show trusted issuer"}),"\n",(0,t.jsxs)(n.li,{children:["PDP decisions return both allow and deny cases via BFF ",(0,t.jsx)(n.code,{children:"/access/v1/*"})]}),"\n",(0,t.jsx)(n.li,{children:"Experience SPA loads with policy\u2011gated nav/routes/widgets"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);