"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[9777],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(96540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},60656:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"services/crud-service/explanation/checkpointing","title":"checkpointing","description":"Checkpointing and recovery","source":"@site/docs/services/crud-service/explanation/checkpointing.md","sourceDirName":"services/crud-service/explanation","slug":"/services/crud-service/explanation/checkpointing","permalink":"/empowernow_docs/docs/services/crud-service/explanation/checkpointing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/crud-service/explanation/checkpointing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Secrets visual guide","permalink":"/empowernow_docs/docs/services/crud-service/secrets/secrets_visual_guide"},"next":{"title":"data-model","permalink":"/empowernow_docs/docs/services/crud-service/explanation/data-model"}}');var s=r(74848),o=r(28453);const i={},c=void 0,a={},d=[{value:"Checkpointing and recovery",id:"checkpointing-and-recovery",level:3},{value:"Flow",id:"flow",level:4}];function l(e){const n={h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"checkpointing-and-recovery",children:"Checkpointing and recovery"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Save"}),": periodic or event-driven snapshots of graph node states, context (inputs, variables, outputs, step_results), in-progress tasks, and current WAITING node."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Restore"}),": given a checkpoint id, rebuild graph state and context, then continue execution (e.g., after resume)."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"flow",children:"Flow"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\r\n  Run[Run loop] --\x3e|node completes| Save[Save checkpoint]\r\n  WAITING((WAITING)) --\x3e Save\r\n  Resume[Resume request] --\x3e Restore[Restore checkpoint]\r\n  Restore --\x3e Run"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Storage abstraction: pluggable save/load interface."}),"\n",(0,s.jsx)(n.li,{children:"Used for resiliency, long-lived interactions, and operator-driven recovery."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);