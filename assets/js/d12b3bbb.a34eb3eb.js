"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[1345],{28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>r});var s=n(96540);const l={},c=s.createContext(l);function o(e){const i=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(c.Provider,{value:i},e.children)}},75051:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>t,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"services/pdp/how-to/experience-policies","title":"PDP Readiness & Policy Guide for Experience","description":"Mount policies, verify PDP health, and define a minimal policy set for the Experience app and its plugins.","source":"@site/docs/services/pdp/how-to/experience-policies.md","sourceDirName":"services/pdp/how-to","slug":"/services/pdp/how-to/experience-policies","permalink":"/empowernow_docs/docs/services/pdp/how-to/experience-policies","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/pdp/how-to/experience-policies.md","tags":[],"version":"current","frontMatter":{"title":"PDP Readiness & Policy Guide for Experience","sidebar_label":"Experience Policies & Readiness","description":"Mount policies, verify PDP health, and define a minimal policy set for the Experience app and its plugins."}}');var l=n(74848),c=n(28453);const o={title:"PDP Readiness & Policy Guide for Experience",sidebar_label:"Experience Policies & Readiness",description:"Mount policies, verify PDP health, and define a minimal policy set for the Experience app and its plugins."},r=void 0,t={},d=[{value:"Policies",id:"policies",level:2},{value:"Minimal demo policies",id:"minimal-demo-policies",level:2},{value:"Membership PIP",id:"membership-pip",level:2},{value:"Health checklist",id:"health-checklist",level:2},{value:"Startup lifecycle",id:"startup-lifecycle",level:2},{value:"See also",id:"see-also",level:2}];function a(e){const i={code:"code",h2:"h2",li:"li",mermaid:"mermaid",p:"p",ul:"ul",...(0,c.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.h2,{id:"policies",children:"Policies"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["Place policy files under ",(0,l.jsx)(i.code,{children:"ServiceConfigs/pdp/config/policies/**"})]}),"\n",(0,l.jsx)(i.li,{children:"Mount the directory read\u2011only into the PDP container"}),"\n",(0,l.jsx)(i.li,{children:"On startup, logs should list loaded policy IDs (> 0)"}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"minimal-demo-policies",children:"Minimal demo policies"}),"\n",(0,l.jsx)(i.p,{children:"Grant allow for common Experience surfaces (scope to real subjects in non\u2011demo setups):"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["Pages list \u2192 resource: ",(0,l.jsx)(i.code,{children:"pages"}),", action: ",(0,l.jsx)(i.code,{children:"view_all"})]}),"\n",(0,l.jsxs)(i.li,{children:["Workflow quick execute \u2192 resource: ",(0,l.jsx)(i.code,{children:"workflows"}),", action: ",(0,l.jsx)(i.code,{children:"execute_quick"})]}),"\n",(0,l.jsxs)(i.li,{children:["Plugin views \u2192 resource: ",(0,l.jsx)(i.code,{children:"plugin.*"}),", action: ",(0,l.jsx)(i.code,{children:"view"})]}),"\n"]}),"\n",(0,l.jsxs)(i.p,{children:["Subjects should use canonical ARNs: ",(0,l.jsx)(i.code,{children:"auth:account:{provider}:{user_id}"})]}),"\n",(0,l.jsx)(i.h2,{id:"membership-pip",children:"Membership PIP"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"If not configured, disable the Membership PIP to avoid runtime errors"}),"\n",(0,l.jsxs)(i.li,{children:["Symptoms of misconfiguration:","\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["Logs: ",(0,l.jsx)(i.code,{children:"MembershipServiceAPI instance not available in the loaded PIP"})]}),"\n",(0,l.jsx)(i.li,{children:"Health shows unhealthy; evaluations may 5xx"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"health-checklist",children:"Health checklist"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"Policy count > 0 in logs after startup"}),"\n",(0,l.jsx)(i.li,{children:"Health endpoint reports healthy"}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"/access/v1/evaluation(s)"})," return decisions for both allow and deny test cases"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"startup-lifecycle",children:"Startup lifecycle"}),"\n",(0,l.jsx)(i.mermaid,{value:"flowchart TD\r\n    A[Start PDP] --\x3e B[Mount policies from ServiceConfigs]\r\n    B --\x3e C{Membership PIP configured?}\r\n    C -- Yes --\x3e D[Initialize PIP]\r\n    C -- No --\x3e E[Disable or stub PIP]\r\n    D --\x3e F{Policies loaded > 0?}\r\n    E --\x3e F\r\n    F -- Yes --\x3e G[Healthy]\r\n    F -- No --\x3e H[Unhealthy: fix policies mount]"}),"\n",(0,l.jsx)(i.h2,{id:"see-also",children:"See also"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["Experience \u2192 Authorization (AuthZEN): ",(0,l.jsx)(i.code,{children:"../../experience/authorization-authzen"})]}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,c.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}}}]);