"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[2029],{28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>c});var s=n(96540);const t={},a=s.createContext(t);function o(e){const r=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:r},e.children)}},84660:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"services/pdp/explanation/expression_evaluator_architecture","title":"Expression Evaluator Architecture \u2014 Secure, Predictable Semantics","description":"Canonical reference: scopedpolicydesign.md. This doc explains evaluator components, guard semantics, and supported operators.","source":"@site/docs/services/pdp/explanation/expression_evaluator_architecture.md","sourceDirName":"services/pdp/explanation","slug":"/services/pdp/explanation/expression_evaluator_architecture","permalink":"/empowernow_docs/docs/services/pdp/explanation/expression_evaluator_architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/pdp/explanation/expression_evaluator_architecture.md","tags":[],"version":"current","frontMatter":{}}');var t=n(74848),a=n(28453);const o={},c="Expression Evaluator Architecture \u2014 Secure, Predictable Semantics",i={},l=[{value:"Components",id:"components",level:2},{value:"Guard semantics: <code>when</code> vs <code>allowIf</code>",id:"guard-semantics-when-vs-allowif",level:2},{value:"Supported operators (string form)",id:"supported-operators-string-form",level:2},{value:"Safety guarantees",id:"safety-guarantees",level:2},{value:"Authoring tips",id:"authoring-tips",level:2},{value:"Practical examples",id:"practical-examples",level:2},{value:"Common pitfalls (and fixes)",id:"common-pitfalls-and-fixes",level:2}];function d(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"expression-evaluator-architecture--secure-predictable-semantics",children:"Expression Evaluator Architecture \u2014 Secure, Predictable Semantics"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["Canonical reference: ",(0,t.jsx)(r.code,{children:"scoped_policy_design.md"}),". This doc explains evaluator components, guard semantics, and supported operators."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"components",children:"Components"}),"\n",(0,t.jsx)(r.mermaid,{value:"classDiagram\r\n  class YAMLExpressionEvaluator {\r\n    +evaluate(expression, context) bool\r\n    -_get_compiled_expression(expr) AST\r\n    -_validate_ast_security(tree)\r\n    -_evaluate_ast_node(node, context) any\r\n  }\r\n  class VariableResolver {\r\n    +resolve(name, context) any\r\n    +resolve_attribute(obj, attr, context) any\r\n  }\r\n  class SubjectProxy { +get_attribute(name, ctx) any }\r\n  class ResourceProxy { +get_attribute(name, ctx) any }\r\n  class ActionProxy { +get_attribute(name, ctx) any }\r\n  class ContextProxy { +get_attribute(name, ctx) any }\r\n\r\n  YAMLExpressionEvaluator --\x3e VariableResolver\r\n  VariableResolver --\x3e SubjectProxy\r\n  VariableResolver --\x3e ResourceProxy\r\n  VariableResolver --\x3e ActionProxy\r\n  VariableResolver --\x3e ContextProxy"}),"\n",(0,t.jsxs)(r.h2,{id:"guard-semantics-when-vs-allowif",children:["Guard semantics: ",(0,t.jsx)(r.code,{children:"when"})," vs ",(0,t.jsx)(r.code,{children:"allowIf"})]}),"\n",(0,t.jsx)(r.mermaid,{value:"sequenceDiagram\r\n  participant Eval as Evaluator\r\n  participant Rule as Rule\r\n  participant Ctx as Context\r\n\r\n  Note over Rule: when = guard (false \u2192 not_applicable)\r\n  Eval->>Rule: evaluate when\r\n  alt when == true\r\n    Rule--\x3e>Eval: applies \u2192 enforce effect\r\n  else when == false\r\n    Rule--\x3e>Eval: not_applicable\r\n  end\r\n\r\n  Note over Rule: allowIf = conditional override\r\n  Eval->>Rule: evaluate allowIf\r\n  alt allowIf == true\r\n    Rule--\x3e>Eval: effect := permit\r\n  else allowIf == false\r\n    Rule--\x3e>Eval: effect unchanged (rule still applies)\r\n  end"}),"\n",(0,t.jsx)(r.h2,{id:"supported-operators-string-form",children:"Supported operators (string form)"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"==  !=  >  <  >=  <=  IN  NOT IN  LIKE  NOT LIKE  MATCHES  NOT MATCHES"})}),"\n",(0,t.jsxs)(r.p,{children:["Dict-only helpers: ",(0,t.jsx)(r.code,{children:"contains"}),", ",(0,t.jsx)(r.code,{children:"startswith"}),", ",(0,t.jsx)(r.code,{children:"endswith"}),", ",(0,t.jsx)(r.code,{children:"path_match"}),", ",(0,t.jsx)(r.code,{children:"path_match_any"}),", ",(0,t.jsx)(r.code,{children:"cidr_match"}),", ",(0,t.jsx)(r.code,{children:"ip_range"}),", ",(0,t.jsx)(r.code,{children:"date_range"}),", ",(0,t.jsx)(r.code,{children:"money_*"}),", ",(0,t.jsx)(r.code,{children:"velocity_within"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["Logical connectors: ",(0,t.jsx)(r.code,{children:"AND"}),", ",(0,t.jsx)(r.code,{children:"OR"}),", ",(0,t.jsx)(r.code,{children:"NOT"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"safety-guarantees",children:"Safety guarantees"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Safe AST subset only; deny imports, eval/exec, and magic attributes"}),"\n",(0,t.jsx)(r.li,{children:"Type-stable evaluation; normalization for ALLOW/DENY \u2192 permit/deny (at load time)"}),"\n",(0,t.jsxs)(r.li,{children:["Attribute resolution restricted to ",(0,t.jsx)(r.code,{children:"subject.*"}),", ",(0,t.jsx)(r.code,{children:"resource.*"}),", ",(0,t.jsx)(r.code,{children:"action.*"}),", ",(0,t.jsx)(r.code,{children:"context.*"}),", ",(0,t.jsx)(r.code,{children:"environment.*"})]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"authoring-tips",children:"Authoring tips"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Prefer ",(0,t.jsx)(r.code,{children:"when"})," for permit-only-on-match (false \u2192 ",(0,t.jsx)(r.code,{children:"not_applicable"}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["Keep custom attributes under ",(0,t.jsx)(r.code,{children:"subject.properties.*"})," and ",(0,t.jsx)(r.code,{children:"resource.properties.*"})]}),"\n",(0,t.jsxs)(r.li,{children:["Avoid ",(0,t.jsx)(r.code,{children:"conditions"})," (plural); use ",(0,t.jsx)(r.code,{children:"condition"})," or sugar (",(0,t.jsx)(r.code,{children:"when"}),", ",(0,t.jsx)(r.code,{children:"allowIf"}),", ",(0,t.jsx)(r.code,{children:"denyIf"}),")"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"practical-examples",children:"Practical examples"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",children:'# Guarded permit (recommended)\r\n- resource: document\r\n  action: read\r\n  effect: permit\r\n  when: "subject.properties.clearance >= resource.properties.classification"\r\n\r\n# Conditional override (be careful)\r\n- resource: document\r\n  action: read\r\n  effect: deny\r\n  allowIf: "subject.properties.is_break_glass == true"\r\n\r\n# IP-based condition using dict helper\r\n- resource: api\r\n  action: call\r\n  effect: permit\r\n  when:\r\n    any:\r\n      - { operator: cidr_match, scope: context, attribute: request_ip, value: "10.0.0.0/8" }\r\n      - { operator: cidr_match, scope: context, attribute: request_ip, value: "192.168.1.0/24" }\n'})}),"\n",(0,t.jsx)(r.h2,{id:"common-pitfalls-and-fixes",children:"Common pitfalls (and fixes)"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Using Pythonisms in strings (e.g., ",(0,t.jsx)(r.code,{children:"is not None"}),") \u2192 use ",(0,t.jsx)(r.code,{children:"!= None"})," per DSL."]}),"\n",(0,t.jsxs)(r.li,{children:["Forgetting ",(0,t.jsx)(r.code,{children:".properties."})," in attribute paths \u2192 ensure ",(0,t.jsx)(r.code,{children:"subject.properties.*"})," / ",(0,t.jsx)(r.code,{children:"resource.properties.*"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:["Mixing ",(0,t.jsx)(r.code,{children:"allowIf"})," and ",(0,t.jsx)(r.code,{children:"when"})," in the same rule \u2192 prefer one style; ",(0,t.jsx)(r.code,{children:"when"})," for guards."]}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);