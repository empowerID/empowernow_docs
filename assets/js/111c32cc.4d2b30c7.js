"use strict";(self.webpackChunkempowernow_docs=self.webpackChunkempowernow_docs||[]).push([[1276],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var i=s(96540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},49359:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"services/bff/explanation/authentication","title":"Authentication Options and Flow","description":"The right mental model: BFF-auth with OAuth 2.1/OIDC","source":"@site/docs/services/bff/explanation/authentication.md","sourceDirName":"services/bff/explanation","slug":"/services/bff/explanation/authentication","permalink":"/empowernow_docs/docs/services/bff/explanation/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services/bff/explanation/authentication.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Authentication Options and Flow","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"What a BFF Is (and Isn\'t)","permalink":"/empowernow_docs/docs/services/bff/explanation/overview"},"next":{"title":"BFF for React SPAs \u2014 How It Works","permalink":"/empowernow_docs/docs/services/bff/explanation/bff-for-spa-overview"}}');var t=s(74848),r=s(28453);const o={title:"Authentication Options and Flow",sidebar_position:2},c=void 0,a={},d=[{value:"The right mental model: BFF-auth with OAuth 2.1/OIDC",id:"the-right-mental-model-bff-auth-with-oauth-21oidc",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"the-right-mental-model-bff-auth-with-oauth-21oidc",children:"The right mental model: BFF-auth with OAuth 2.1/OIDC"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Identity source: the end-user\u2019s identity comes from the OIDC ID token (or, when configured, the UserInfo endpoint). The ",(0,t.jsx)(n.code,{children:"id_token.sub"})," represents the human subject and is what the BFF stores in the session as ",(0,t.jsx)(n.code,{children:"user_id"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Service tokens are not identity: tokens used by the BFF to call backend services (CRUD/PDP/etc.) can be client-credential or token-exchange tokens. Their ",(0,t.jsx)(n.code,{children:"sub"})," is often the OAuth client (for example, ",(0,t.jsx)(n.code,{children:"bff-server"}),"). That is OK and expected\u2014they are not the user identity."]}),"\n",(0,t.jsx)(n.li,{children:"No browser token exposure: these service tokens live only server-side in the BFF; the browser never sees them and must not interpret them."}),"\n",(0,t.jsxs)(n.li,{children:["Session flow: the browser authenticates at the IdP; the BFF receives the authorization code, exchanges it server-side, obtains an ",(0,t.jsx)(n.code,{children:"id_token"})," (and optionally a user-bound access token), then creates a session cookie and stores ",(0,t.jsx)(n.code,{children:"user_id = id_token.sub"})," (or ",(0,t.jsx)(n.code,{children:"userinfo.sub"}),"). When the SPA calls ",(0,t.jsx)(n.code,{children:"/api/..."}),", the BFF uses its server-held service tokens to call backends."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"What we support (verified)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Browser SPAs use a secure session with a single HttpOnly cookie (",(0,t.jsx)(n.code,{children:"bff_session"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"Service/API callers can use bearer tokens; the BFF validates via IdP introspection when configured."}),"\n",(0,t.jsxs)(n.li,{children:["IdP configuration is externalized in ",(0,t.jsx)(n.code,{children:"ServiceConfigs/BFF/config/idps.yaml"})," (issuer, audience, JWKS/introspection URLs, client credentials, claims mapping)."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Two flows in one system"}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\n  autonumber\n  participant SPA\n  participant Traefik\n  participant BFF\n  participant IdP\n  Note over SPA: Session-based (cookie)\n  SPA->>Traefik: GET /api/** (same-origin)\n  Traefik->>BFF: GET /auth/verify\n  alt Not authenticated\n    BFF--\x3e>Traefik: 401\n    Traefik--\x3e>SPA: 401\n    SPA->>BFF: GET /auth/login\n    BFF--\x3e>SPA: 302 \u2192 IdP /authorize (PKCE/PAR)\n    SPA->>IdP: GET /authorize\n    IdP--\x3e>BFF: 302 \u2192 /auth/callback?code=...\n    BFF->>IdP: POST /token\n    IdP--\x3e>BFF: access/refresh tokens\n    BFF--\x3e>SPA: Set-Cookie bff_session\n  else Authenticated\n    BFF--\x3e>Traefik: 200 + headers\n    Traefik--\x3e>SPA: 200 JSON\n  end\n  \n  Note over BFF: Bearer token path\n  SPA->>BFF: GET /api/** Authorization: Bearer <jwt>\n  BFF->>IdP: POST introspect (retry)\n  IdP--\x3e>BFF: { active: true, ..., scope, roles }\n  BFF--\x3e>SPA: 200 JSON"}),"\n",(0,t.jsx)(n.p,{children:"Where it\u2019s implemented"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Bearer validation is in ",(0,t.jsx)(n.code,{children:"utils/auth.py"})," (",(0,t.jsx)(n.code,{children:"get_current_user"}),"): decodes issuer from JWT, loads ",(0,t.jsx)(n.code,{children:"idps.yaml"}),", retries ",(0,t.jsx)(n.code,{children:"introspect_token"}),", builds ",(0,t.jsx)(n.code,{children:"EnhancedTokenClaims"})," with normalized roles/permissions."]}),"\n",(0,t.jsxs)(n.li,{children:["Unique identity is represented as ",(0,t.jsx)(n.code,{children:"auth:{entity_type}:{idp}:{subject}"})," (see ",(0,t.jsx)(n.code,{children:"utils/arn.py"})," and ",(0,t.jsx)(n.code,{children:"UniqueIdentity"})," in ",(0,t.jsx)(n.code,{children:"utils/auth.py"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["Unique identity is represented as canonical ARNs. The provider/idp segment prefers the IdP ",(0,t.jsx)(n.code,{children:"provider"})," alias (falls back to entry ",(0,t.jsx)(n.code,{children:"name"}),") to keep identities stable across entries with the same issuer, e.g., ",(0,t.jsx)(n.code,{children:"auth:account:empowernow:{sub}"})," for both admin and CRUD audiences."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Key behaviors"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Session path: tokens never reach the browser; Traefik calls ",(0,t.jsx)(n.code,{children:"/auth/verify"})," (alias ",(0,t.jsx)(n.code,{children:"/auth/forward"}),") to gate requests; BFF sets/clears ",(0,t.jsx)(n.code,{children:"bff_session"})," and issues CSRF token for state\u2011changing calls."]}),"\n",(0,t.jsxs)(n.li,{children:["Bearer path: ",(0,t.jsx)(n.code,{children:"HTTPBearer"})," extracts the token; we do unverified decode to read ",(0,t.jsx)(n.code,{children:"iss"}),", then introspection with Basic auth using IdP client credentials; we normalize roles/permissions via claims mapping."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"CSRF in SPAs (contract)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Header: ",(0,t.jsx)(n.code,{children:"X-CSRF-Token"})," (or query param ",(0,t.jsx)(n.code,{children:"csrf"})," for GET logout flow)"]}),"\n",(0,t.jsxs)(n.li,{children:["Cookie name: ",(0,t.jsx)(n.code,{children:"_eid_csrf_v1"})," (readable by JS; HttpOnly=false)"]}),"\n",(0,t.jsx)(n.li,{children:"Required for: POST, PUT, DELETE, PATCH to BFF paths (safe methods like GET/HEAD/OPTIONS skip validation)"}),"\n",(0,t.jsxs)(n.li,{children:["Example fetch usage:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"await apiClient.post('/api/crud/execute', body, {\n  headers: { 'X-CSRF-Token': getCookie('_eid_csrf_v1') }\n});\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Cookies"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Session cookie name: ",(0,t.jsx)(n.code,{children:"bff_session"})," (HttpOnly, Secure, SameSite=Lax, domain per env)"]}),"\n",(0,t.jsxs)(n.li,{children:["CSRF cookie name: ",(0,t.jsx)(n.code,{children:"_eid_csrf_v1"})," (readable by JS, SameSite=Strict/Lax per config)"]}),"\n",(0,t.jsxs)(n.li,{children:["Domain guidance: set ",(0,t.jsx)(n.code,{children:"BFF_COOKIE_DOMAIN"})," to your apex (e.g., ",(0,t.jsx)(n.code,{children:".ocg.labs.empowernow.ai"}),") to enable SSO across SPAs"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Callback origins"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Dynamic callback can echo the request origin when ",(0,t.jsx)(n.code,{children:"BFF_DYNAMIC_CALLBACK=true"}),"; otherwise ",(0,t.jsx)(n.code,{children:"BFF_CALLBACK_URL"})," is used. In dev, set ",(0,t.jsx)(n.code,{children:"VITE_BFF_BASE_URL"})," and use same\u2011origin where possible."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Security notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Claims mapping supports sources from ",(0,t.jsx)(n.code,{children:"roles"}),", ",(0,t.jsx)(n.code,{children:"groups"}),", Keycloak ",(0,t.jsx)(n.code,{children:"resource_access"})," client roles, and space\u2011delimited ",(0,t.jsx)(n.code,{children:"scope"}),". See ",(0,t.jsx)(n.code,{children:"claims_mapping"})," in ",(0,t.jsx)(n.code,{children:"idps.yaml"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Retries/backoff for introspection use ",(0,t.jsx)(n.code,{children:"tenacity"})," (transient errors won\u2019t result in immediate 401s)."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);